{"version":3,"sources":["alertservice.js","collectionservice.js","dialogservice.js","formservice.js","metadataservice.js","paginationservice.js","productbundleservice.js","slatwallInterceptor.js","alertcontroller.js","collections.js","collectionstabcontroller.js","confirmationcontroller.js","create-bundle-controller.js","globalsearch.js","pagedialog.js","preprocessaccount_addaccountpayment.js","routercontroller.js"],"names":["angular","module","factory","$timeout","_alerts","alertService","addAlert","alert","push","splice","addAlerts","alerts","formatMessagesToAlerts","messages","message","msg","type","messageType","fade","dismissable","getAlerts","removeAlert","i","removeOldestAlert","_alert","$filter","$log","_collection","_filterPropertiesList","_filterCount","_orderBy","collectionService","setFilterCount","number","debug","getFilterCount","getColumns","collectionConfig","columns","getFilterPropertiesList","getFilterPropertiesListByBaseEntityAlias","baseEntityAlias","setFilterPropertiesList","value","key","isUndefined","stringifyJSON","jsonObject","jsonString","toJson","removeFilterItem","filterItem","filterGroup","pop","indexOf","selectFilterItem","$$isClosed","$$siblingItems","$$disabled","setItemInUse","selectFilterGroupItem","filterGroupItem","newFilterItem","filterItemGroup","prepareForFilterGroup","displayPropertyIdentifier","propertyIdentifier","comparisonOperator","$$isNew","length","logicalOperator","$$prepareForFilterGroup","this","newFilterGroupItem","transplantFilterItemIntoFilterGroup","isDefined","formatFilterPropertiesList","filterPropertiesList","simpleGroup","$$group","data","drillDownGroup","compareCollections","attributeCollections","ormtype","attributeID","fieldtype","name","orderBy","propertiesList","predicate","reverse","partialsPath","_pageDialogs","dialogService","addPageDialog","newDialog","path","removePageDialog","index","getPageDialogs","form","object","editing","_forms","_pristinePropertyValue","formService","setPristinePropertyValue","property","getPristinePropertyValue","clearForm","charAt","setForm","getForm","formName","getForms","getFormsByObjectName","objectName","forms","f","$$swFormInfo","metaData","className","createForm","_form","resetForm","$setViewValue","$render","$submitted","$setPristine","_propertiesList","metadataService","getPropertiesList","getPropertiesListByBaseEntityAlias","setPropertiesList","formatPropertiesList","temp","sort","_pageShowOptions","display","_pageShow","_currentPage","_pageStart","_pageEnd","_recordsCount","_totalPages","paginationService","getTotalPages","setTotalPages","totalPages","getPageStart","setPageStart","pageStart","getPageEnd","setPageEnd","pageEnd","getRecordsCount","setRecordsCount","recordsCount","getPageShowOptions","setPageShowOptions","pageShowOptions","getPageShow","setPageShow","pageShow","getCurrentPage","setCurrentPage","currentPage","previousPage","hasPrevious","nextPage","hasNext","$slatwall","utilityService","productBundleService","decorateProductBundleGroup","productBundleGroup","$$editing","prototype","$$setMinimumQuantity","quantity","minimumQuantity","maximumQuantity","$$setMaximumQuantity","$$setActive","active","$$toggleEdit","extend","formatProductBundleGroupFilters","productBundelGroupFilters","filterTerm","entityType","arraySorter","$q","interceptor","request","config","method","url","params","serializedJsonData","context","$","param","headers","response","requestError","rejection","reject","responseError","status","controller","$scope","$id","$location","QueryString","query_string","query","window","location","search","substring","vars","split","pair","arr","collectionID","autoScrollPage","autoScrollDisabled","appendToCollection","collection","collectionListingPromise","getEntity","id","then","pageRecords","concat","reason","keywords","loadingCollection","searchPromise","searchCollection","$timout","cancel","getCollection","collectionInitial","copy","fromJson","filterGroups","filterItemCounter","unbindCollectionObserver","$watch","newValue","oldValue","filterPropertiesPromise","getFilterPropertiesByBaseEntityName","setCollectionForm","collectionForm","collectionDetails","isOpen","openCollectionDetails","errorMessage","filterGroupArray","filterItemCount","saveCollection","entityName","isFormValid","collectionConfigString","saveCollectionPromise","saveEntity","forEach","errors","$invalid","angularForm","formValid","field","error","$error","$pristine","$viewValue","copyExistingCollection","selectedExistingCollection","setSelectedExistingCollection","setSelectedFilterProperty","selectedFilterProperty","filterCount","$modalInstance","deleteEntity","entity","close","dismiss","$rootScope","$window","getParameterByName","replace","regex","RegExp","results","exec","decodeURIComponent","scrollToTopOfDialog","productID","productBundleConstructor","product","newProduct","brand","newBrand","productType","newProductType","$$setBrand","$$setProductType","$$addSku","skus","productBundleGroups","productPromise","getProduct","promise","$$getSkus","$$getProductBundleGroups","$$getProductBundleGroupType","saveProductBundle","closeDialogIndex","newSaving","dIndex","$$save","closeSaving","closePageDialog","searchResultsOpen","sidebarClass","loading","resultsFound","searchResults","title","resultNameFilter","getRBKey","account","vendor","_timeoutPromise","_loadingCount","updateSearchResults","showResults","hideResults","Object","keys","deferkey","toLowerCase","link","_foundResults","_thisEntityName","onclick","event","_targetClassOfSearch","target","parentElement","offsetParent","classList","contains","$apply","$anchorScroll","pageDialogs","hash","pageDialogStyle","z-index","$compile","paymentType","aptCharge","aptCredit","aptAdjustment","totalAmountToApply","paymentTypeName","slatwall","rbKey","paymentTypeLock","amount","updatePaymentType","appliedOrderPayment","obj","updateSubTotal","undefined","isNaN","parseFloat","amountUnapplied","Math","round","accountBalanceChange","$routeParams","baseURL","partialRoute","controllerType","entityID"],"mappings":"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","file":"all.min.js","sourcesContent":["\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('alertService', ['$timeout', function($timeout) {\n  var _alerts = [];\n  var alertService = {\n    addAlert: function(alert) {\n      _alerts.push(alert);\n      $timeout(function() {\n        _alerts.splice(0, 1);\n      }, 3500);\n    },\n    addAlerts: function(alerts) {\n      for (var alert in alerts) {\n        _alerts.push(alerts[alert]);\n        $timeout(function() {\n          _alerts.splice(0, 1);\n        }, 3500);\n      }\n    },\n    formatMessagesToAlerts: function(messages) {\n      var alerts = [];\n      for (var message in messages) {\n        var alert = {\n          msg: messages[message].message,\n          type: messages[message].messageType\n        };\n        alerts.push(alert);\n        if (alert.type === 'success' || alert.type === 'error') {\n          $timeout(function() {\n            alert.fade = true;\n          }, 3500);\n          alert.dismissable = false;\n        } else {\n          alert.fade = false;\n          alert.dismissable = true;\n        }\n      }\n      return alerts;\n    },\n    getAlerts: function() {\n      return _alerts;\n    },\n    removeAlert: function(alert) {\n      for (var i in _alerts) {\n        if (_alerts[i] === alert) {\n          delete _alerts[i];\n        }\n      }\n    },\n    removeOldestAlert: function() {\n      _alert.splice(0, 1);\n    }\n  };\n  return alertService;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('collectionService', ['$filter', '$log', function($filter, $log) {\n  var _collection = null;\n  var _collectionConfig = null;\n  var _filterPropertiesList = {};\n  var _filterCount = 0;\n  var _orderBy = $filter('orderBy');\n  var collectionService = {\n    setFilterCount: function(number) {\n      $log.debug('incrementFilterCount');\n      _filterCount = number;\n    },\n    getFilterCount: function() {\n      return _filterCount;\n    },\n    getColumns: function() {\n      return _collection.collectionConfig.columns;\n    },\n    getFilterPropertiesList: function() {\n      return _filterPropertiesList;\n    },\n    getFilterPropertiesListByBaseEntityAlias: function(baseEntityAlias) {\n      return _filterPropertiesList[baseEntityAlias];\n    },\n    setFilterPropertiesList: function(value, key) {\n      if (angular.isUndefined(_filterPropertiesList[key])) {\n        _filterPropertiesList[key] = value;\n      }\n    },\n    stringifyJSON: function(jsonObject) {\n      var jsonString = angular.toJson(jsonObject);\n      return jsonString;\n    },\n    removeFilterItem: function(filterItem, filterGroup) {\n      filterGroup.pop(filterGroup.indexOf(filterItem));\n    },\n    selectFilterItem: function(filterItem) {\n      if (filterItem.$$isClosed) {\n        for (var i in filterItem.$$siblingItems) {\n          filterItem.$$siblingItems[i].$$isClosed = true;\n          filterItem.$$siblingItems[i].$$disabled = true;\n        }\n        filterItem.$$isClosed = false;\n        filterItem.$$disabled = false;\n        filterItem.setItemInUse(true);\n      } else {\n        for (var i in filterItem.$$siblingItems) {\n          filterItem.$$siblingItems[i].$$disabled = false;\n        }\n        filterItem.$$isClosed = true;\n        filterItem.setItemInUse(false);\n      }\n    },\n    selectFilterGroupItem: function(filterGroupItem) {\n      if (filterGroupItem.$$isClosed) {\n        for (var i in filterGroupItem.$$siblingItems) {\n          filterGroupItem.$$siblingItems[i].$$disabled = true;\n        }\n        filterGroupItem.$$isClosed = false;\n        filterGroupItem.$$disabled = false;\n      } else {\n        for (var i in filterGroupItem.$$siblingItems) {\n          filterGroupItem.$$siblingItems[i].$$disabled = false;\n        }\n        filterGroupItem.$$isClosed = true;\n      }\n      filterGroupItem.setItemInUse(!filterGroupItem.$$isClosed);\n    },\n    newFilterItem: function(filterItemGroup, setItemInUse, prepareForFilterGroup) {\n      if (angular.isUndefined(prepareForFilterGroup)) {\n        prepareForFilterGroup = false;\n      }\n      var filterItem = {\n        displayPropertyIdentifier: \"\",\n        propertyIdentifier: \"\",\n        comparisonOperator: \"\",\n        value: \"\",\n        $$disabled: false,\n        $$isClosed: true,\n        $$isNew: true,\n        $$siblingItems: filterItemGroup,\n        setItemInUse: setItemInUse\n      };\n      if (filterItemGroup.length !== 0) {\n        filterItem.logicalOperator = \"AND\";\n      }\n      if (prepareForFilterGroup === true) {\n        filterItem.$$prepareForFilterGroup = true;\n      }\n      filterItemGroup.push(filterItem);\n      this.selectFilterItem(filterItem);\n    },\n    newFilterGroupItem: function(filterItemGroup, setItemInUse) {\n      var filterGroupItem = {\n        filterGroup: [],\n        $$disabled: \"false\",\n        $$isClosed: \"true\",\n        $$siblingItems: filterItemGroup,\n        $$isNew: \"true\",\n        setItemInUse: setItemInUse\n      };\n      if (filterItemGroup.length !== 0) {\n        filterGroupItem.logicalOperator = \"AND\";\n      }\n      filterItemGroup.push(filterGroupItem);\n      collectionService.selectFilterGroupItem(filterGroupItem);\n      this.newFilterItem(filterGroupItem.filterGroup, setItemInUse);\n    },\n    transplantFilterItemIntoFilterGroup: function(filterGroup, filterItem) {\n      var filterGroupItem = {\n        filterGroup: [],\n        $$disabled: \"false\",\n        $$isClosed: \"true\",\n        $$isNew: \"true\"\n      };\n      if (angular.isDefined(filterItem.logicalOperator)) {\n        filterGroupItem.logicalOperator = filterItem.logicalOperator;\n        delete filterItem.logicalOperator;\n      }\n      filterGroupItem.setItemInUse = filterItem.setItemInUse;\n      filterGroupItem.$$siblingItems = filterItem.$$siblingItems;\n      filterItem.$$siblingItems = [];\n      filterGroup.pop(filterGroup.indexOf(filterItem));\n      filterItem.$$prepareForFilterGroup = false;\n      filterGroupItem.filterGroup.push(filterItem);\n      filterGroup.push(filterGroupItem);\n    },\n    formatFilterPropertiesList: function(filterPropertiesList, propertyIdentifier) {\n      $log.debug('format Filter Properties List arguments 2');\n      $log.debug(filterPropertiesList);\n      $log.debug(propertyIdentifier);\n      var simpleGroup = {\n        $$group: 'simple',\n        displayPropertyIdentifier: '-----------------'\n      };\n      filterPropertiesList.data.push(simpleGroup);\n      var drillDownGroup = {\n        $$group: 'drilldown',\n        displayPropertyIdentifier: '-----------------'\n      };\n      filterPropertiesList.data.push(drillDownGroup);\n      var compareCollections = {\n        $$group: 'compareCollections',\n        displayPropertyIdentifier: '-----------------'\n      };\n      filterPropertiesList.data.push(compareCollections);\n      var attributeCollections = {\n        $$group: 'attribute',\n        displayPropertyIdentifier: '-----------------'\n      };\n      filterPropertiesList.data.push(attributeCollections);\n      for (var i in filterPropertiesList.data) {\n        if (angular.isDefined(filterPropertiesList.data[i].ormtype)) {\n          if (angular.isDefined(filterPropertiesList.data[i].attributeID)) {\n            filterPropertiesList.data[i].$$group = 'attribute';\n          } else {\n            filterPropertiesList.data[i].$$group = 'simple';\n          }\n        }\n        if (angular.isDefined(filterPropertiesList.data[i].fieldtype)) {\n          if (filterPropertiesList.data[i].fieldtype === 'id') {\n            filterPropertiesList.data[i].$$group = 'simple';\n          }\n          if (filterPropertiesList.data[i].fieldtype === 'many-to-one') {\n            filterPropertiesList.data[i].$$group = 'drilldown';\n          }\n          if (filterPropertiesList.data[i].fieldtype === 'many-to-many' || filterPropertiesList.data[i].fieldtype === 'one-to-many') {\n            filterPropertiesList.data[i].$$group = 'compareCollections';\n          }\n        }\n        filterPropertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + filterPropertiesList.data[i].name;\n      }\n      filterPropertiesList.data = _orderBy(filterPropertiesList.data, ['-$$group', 'propertyIdentifier'], false);\n    },\n    orderBy: function(propertiesList, predicate, reverse) {\n      return _orderBy(propertiesList, predicate, reverse);\n    }\n  };\n  return collectionService;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('dialogService', ['partialsPath', function(partialsPath) {\n  var _pageDialogs = [];\n  var dialogService = {\n    addPageDialog: function(name) {\n      var newDialog = {'path': partialsPath + name + '.html'};\n      _pageDialogs.push(newDialog);\n    },\n    removePageDialog: function(index) {\n      _pageDialogs.splice(index, 1);\n    },\n    getPageDialogs: function() {\n      return _pageDialogs;\n    }\n  };\n  return dialogService;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('formService', ['$log', function($log) {\n  var _forms = {};\n  var _pristinePropertyValue = {};\n  function form(name, object, editing) {\n    this.name = name;\n    this.object = object;\n    this.editing = editing;\n  }\n  ;\n  var formService = {\n    setPristinePropertyValue: function(property, value) {\n      _pristinePropertyValue[property] = value;\n    },\n    getPristinePropertyValue: function(property) {\n      return _pristinePropertyValue[property];\n    },\n    clearForm: function(form) {\n      $log.debug('clear form');\n      $log.debug(form);\n      for (var key in form) {\n        if (key.charAt(0) !== '$') {\n          $log.debug(form[key]);\n        }\n      }\n    },\n    setForm: function(form) {\n      _forms[form.name] = form;\n    },\n    getForm: function(formName) {\n      return _forms[formName];\n    },\n    getForms: function() {\n      return _forms;\n    },\n    getFormsByObjectName: function(objectName) {\n      var forms = [];\n      for (var f in _forms) {\n        if (angular.isDefined(_forms[f].$$swFormInfo.object) && _forms[f].$$swFormInfo.object.metaData.className === objectName) {\n          forms.push(_forms[f]);\n        }\n      }\n      return forms;\n    },\n    createForm: function(name, object, editing) {\n      var _form = new form(name, object, editing);\n      this.setForm(_form);\n      return _form;\n    },\n    resetForm: function(form) {\n      for (var key in form) {\n        if (key.charAt(0) !== '$') {\n          if (angular.isDefined(this.getPristinePropertyValue(key))) {\n            form[key].$setViewValue(this.getPristinePropertyValue(key));\n          } else {\n            form[key].$setViewValue('');\n          }\n          form[key].$render();\n        }\n      }\n      form.$submitted = false;\n      form.$setPristine();\n    }\n  };\n  return formService;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('metadataService', ['$filter', '$log', function($filter, $log) {\n  var _propertiesList = {};\n  var _orderBy = $filter('orderBy');\n  var metadataService = {\n    getPropertiesList: function() {\n      return _propertiesList;\n    },\n    getPropertiesListByBaseEntityAlias: function(baseEntityAlias) {\n      return _propertiesList[baseEntityAlias];\n    },\n    setPropertiesList: function(value, key) {\n      _propertiesList[key] = value;\n    },\n    formatPropertiesList: function(propertiesList, propertyIdentifier) {\n      var simpleGroup = {$$group: 'simple'};\n      propertiesList.data.push(simpleGroup);\n      var drillDownGroup = {$$group: 'drilldown'};\n      propertiesList.data.push(drillDownGroup);\n      var compareCollections = {$$group: 'compareCollections'};\n      propertiesList.data.push(compareCollections);\n      var attributeCollections = {$$group: 'attribute'};\n      propertiesList.data.push(attributeCollections);\n      for (var i in propertiesList.data) {\n        if (angular.isDefined(propertiesList.data[i].ormtype)) {\n          if (angular.isDefined(propertiesList.data[i].attributeID)) {\n            propertiesList.data[i].$$group = 'attribute';\n          } else {\n            propertiesList.data[i].$$group = 'simple';\n          }\n        }\n        if (angular.isDefined(propertiesList.data[i].fieldtype)) {\n          if (propertiesList.data[i].fieldtype === 'id') {\n            propertiesList.data[i].$$group = 'simple';\n          }\n          if (propertiesList.data[i].fieldtype === 'many-to-one') {\n            propertiesList.data[i].$$group = 'drilldown';\n          }\n          if (propertiesList.data[i].fieldtype === 'many-to-many' || propertiesList.data[i].fieldtype === 'one-to-many') {\n            propertiesList.data[i].$$group = 'compareCollections';\n          }\n        }\n        propertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + propertiesList.data[i].name;\n      }\n      var temp = [];\n      for (var i = 0; i <= propertiesList.data.length - 1; i++) {\n        if (propertiesList.data[i].propertyIdentifier.indexOf(\".undefined\") != -1) {\n          $log.debug(\"removing: \" + propertiesList.data[i].displayPropertyIdentifier);\n          propertiesList.data[i].displayPropertyIdentifier = \"hide\";\n        } else {\n          temp.push(propertiesList.data[i]);\n          $log.debug(propertiesList.data[i]);\n        }\n      }\n      temp.sort;\n      propertiesList.data = temp;\n      $log.debug(\"----------------------PropertyList\\n\\n\\n\\n\\n\");\n      propertiesList.data = _orderBy(propertiesList.data, ['propertyIdentifier'], false);\n    },\n    orderBy: function(propertiesList, predicate, reverse) {\n      return _orderBy(propertiesList, predicate, reverse);\n    }\n  };\n  return metadataService;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('paginationService', [function() {\n  var _pageRecords = [];\n  var _pageShowOptions = [{\n    display: 10,\n    value: 10\n  }, {\n    display: 20,\n    value: 20\n  }, {\n    display: 50,\n    value: 50\n  }, {\n    display: 250,\n    value: 250\n  }, {\n    display: \"Auto\",\n    value: \"Auto\"\n  }];\n  var _pageShow = 10;\n  var _currentPage = 1;\n  var _pageStart = 0;\n  var _pageEnd = 0;\n  var _recordsCount = 0;\n  var _totalPages = 0;\n  var paginationService = {\n    getTotalPages: function() {\n      return _totalPages;\n    },\n    setTotalPages: function(totalPages) {\n      _totalPages = totalPages;\n    },\n    getPageStart: function() {\n      return _pageStart;\n    },\n    setPageStart: function(pageStart) {\n      _pageStart = pageStart;\n    },\n    getPageEnd: function() {\n      return _pageEnd;\n    },\n    setPageEnd: function(pageEnd) {\n      _pageEnd = pageEnd;\n    },\n    getRecordsCount: function() {\n      return _recordsCount;\n    },\n    setRecordsCount: function(recordsCount) {\n      _recordsCount = recordsCount;\n    },\n    getPageShowOptions: function() {\n      return _pageShowOptions;\n    },\n    setPageShowOptions: function(pageShowOptions) {\n      _pageShowOptions = pageShowOptions;\n    },\n    getPageShow: function() {\n      return _pageShow;\n    },\n    setPageShow: function(pageShow) {\n      _pageShow = pageShow;\n    },\n    getCurrentPage: function() {\n      return _currentPage;\n    },\n    setCurrentPage: function(currentPage) {\n      _currentPage = currentPage;\n    },\n    previousPage: function() {\n      if (!this.hasPrevious()) {\n        _currentPage = this.getCurrentPage() - 1;\n      }\n    },\n    nextPage: function() {\n      if (!this.hasNext()) {\n        _currentPage = this.getCurrentPage() + 1;\n      }\n    },\n    hasPrevious: function() {\n      if (paginationService.getPageStart() <= 1) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    hasNext: function() {\n      if (paginationService.getPageEnd() === paginationService.getRecordsCount()) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  };\n  return paginationService;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('productBundleService', ['$log', '$slatwall', 'utilityService', function($log, $slatwall, utilityService) {\n  var productBundleService = {\n    decorateProductBundleGroup: function(productBundleGroup) {\n      productBundleGroup.data.$$editing = true;\n      var prototype = {\n        $$setMinimumQuantity: function(quantity) {\n          if (quantity < 0 || quantity === null) {\n            this.minimumQuantity = 0;\n          }\n          if (quantity > this.maximumQuantity) {\n            this.maximumQuantity = quantity;\n          }\n        },\n        $$setMaximumQuantity: function(quantity) {\n          if (quantity < 1 || quantity === null) {\n            this.maximumQuantity = 1;\n          }\n          if (this.maximumQuantity < this.minimumQuantity) {\n            this.minimumQuantity = this.maximumQuantity;\n          }\n        },\n        $$setActive: function(value) {\n          this.active = value;\n        },\n        $$toggleEdit: function() {\n          if (angular.isUndefined(this.$$editing) || this.$$editing === false) {\n            this.$$editing = true;\n          } else {\n            this.$$editing = false;\n          }\n        }\n      };\n      angular.extend(productBundleGroup.data, prototype);\n    },\n    formatProductBundleGroupFilters: function(productBundelGroupFilters, filterTerm) {\n      $log.debug('formatProductBundleGroupFilters');\n      $log.debug(filterTerm);\n      if (filterTerm.value === 'sku') {\n        for (var i in productBundelGroupFilters) {\n          productBundelGroupFilters[i].name = productBundelGroupFilters[i][filterTerm.value + 'Code'];\n          productBundelGroupFilters[i].type = filterTerm.name;\n          productBundelGroupFilters[i].entityType = filterTerm.value;\n          productBundelGroupFilters[i].propertyIdentifier = '_sku.skuID';\n        }\n      } else {\n        for (var i in productBundelGroupFilters) {\n          productBundelGroupFilters[i].name = productBundelGroupFilters[i][filterTerm.value + 'Name'];\n          productBundelGroupFilters[i].type = filterTerm.name;\n          productBundelGroupFilters[i].entityType = filterTerm.value;\n          if (filterTerm.value === 'brand' || filterTerm.value === 'productType') {\n            productBundelGroupFilters[i].propertyIdentifier = '_sku.product.' + filterTerm.value + '.' + filterTerm.value + 'ID';\n          } else {\n            productBundelGroupFilters[i].propertyIdentifier = '_sku.' + filterTerm.value + '.' + filterTerm.value + 'ID';\n          }\n        }\n      }\n      productBundelGroupFilters = utilityService.arraySorter(productBundelGroupFilters, \"name\");\n      $log.debug(productBundelGroupFilters);\n      return productBundelGroupFilters;\n    }\n  };\n  return productBundleService;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').factory('slatwallInterceptor', ['$q', '$log', 'alertService', function($q, $log, alertService) {\n  var interceptor = {\n    'request': function(config) {\n      $log.debug('request');\n      if (config.method == 'GET' && (config.url.indexOf('.html') == -1) && config.url.indexOf('.json') == -1) {\n        config.method = 'POST';\n        config.data = {};\n        var data = {};\n        if (angular.isDefined(config.params)) {\n          data = config.params;\n        }\n        var params = {};\n        params.serializedJsonData = angular.toJson(data);\n        params.context = \"GET\";\n        config.data = $.param(params);\n        delete config.params;\n        config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      }\n      return config;\n    },\n    'response': function(response) {\n      $log.debug('response');\n      var messages = response.data.messages;\n      var alerts = alertService.formatMessagesToAlerts(messages);\n      alertService.addAlerts(alerts);\n      return response;\n    },\n    'requestError': function(rejection) {\n      $log.debug('requestError');\n      return $q.reject(rejection);\n    },\n    'responseError': function(rejection) {\n      $log.debug('responseReject');\n      if (angular.isDefined(rejection.status) && rejection.status !== 404) {\n        if (angular.isDefined(rejection.data) && angular.isDefined(rejection.data.messages)) {\n          var messages = rejection.data.messages;\n          var alerts = alertService.formatMessagesToAlerts(messages);\n          alertService.addAlerts(alerts);\n        } else {\n          var message = {\n            msg: 'there was error retrieving data',\n            type: 'error'\n          };\n          alertService.addAlert(message);\n        }\n      }\n      return $q.reject(rejection);\n    }\n  };\n  return interceptor;\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller('alertController', ['$scope', 'alertService', function($scope, alertService) {\n  $scope.$id = \"alertController\";\n  $scope.alerts = alertService.getAlerts();\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller('collections', ['$scope', '$location', '$log', '$timeout', '$slatwall', 'collectionService', 'metadataService', 'paginationService', function($scope, $location, $log, $timeout, $slatwall, collectionService, metadataService, paginationService) {\n  $scope.$id = \"collectionsController\";\n  var QueryString = function() {\n    var query_string = {};\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i = 0; i < vars.length; i++) {\n      var pair = vars[i].split(\"=\");\n      if (typeof query_string[pair[0]] === \"undefined\") {\n        query_string[pair[0]] = pair[1];\n      } else if (typeof query_string[pair[0]] === \"string\") {\n        var arr = [query_string[pair[0]], pair[1]];\n        query_string[pair[0]] = arr;\n      } else {\n        query_string[pair[0]].push(pair[1]);\n      }\n    }\n    return query_string;\n  }();\n  $scope.collectionID = QueryString.collectionID;\n  $scope.currentPage = paginationService.getCurrentPage();\n  $scope.pageShow = paginationService.getPageShow();\n  $scope.pageStart = paginationService.getPageStart;\n  $scope.pageEnd = paginationService.getPageEnd;\n  $scope.recordsCount = paginationService.getRecordsCount;\n  $scope.autoScrollPage = 1;\n  $scope.autoScrollDisabled = false;\n  $scope.appendToCollection = function() {\n    if ($scope.pageShow === 'Auto') {\n      $log.debug('AppendToCollection');\n      if ($scope.autoScrollPage < $scope.collection.totalPages) {\n        $scope.autoScrollDisabled = true;\n        $scope.autoScrollPage++;\n        var collectionListingPromise = $slatwall.getEntity('collection', {\n          id: $scope.collectionID,\n          currentPage: $scope.autoScrollPage,\n          pageShow: 50\n        });\n        collectionListingPromise.then(function(value) {\n          $scope.collection.pageRecords = $scope.collection.pageRecords.concat(value.pageRecords);\n          $scope.autoScrollDisabled = false;\n        }, function(reason) {});\n      }\n    }\n  };\n  $scope.keywords = \"\";\n  $scope.loadingCollection = false;\n  var searchPromise;\n  $scope.searchCollection = function($timout) {\n    if (searchPromise) {\n      $timeout.cancel(searchPromise);\n    }\n    searchPromise = $timeout(function() {\n      $log.debug('search with keywords');\n      $log.debug($scope.keywords);\n      paginationService.setCurrentPage(1);\n      $scope.loadingCollection = true;\n      $scope.getCollection();\n    }, 500);\n  };\n  $scope.getCollection = function() {\n    var pageShow = 50;\n    if ($scope.pageShow !== 'Auto') {\n      pageShow = $scope.pageShow;\n    }\n    var collectionListingPromise = $slatwall.getEntity('collection', {\n      id: $scope.collectionID,\n      currentPage: $scope.currentPage,\n      pageShow: pageShow,\n      keywords: $scope.keywords\n    });\n    collectionListingPromise.then(function(value) {\n      $scope.collection = value;\n      $scope.collectionInitial = angular.copy($scope.collection);\n      if (angular.isUndefined($scope.collectionConfig)) {\n        $scope.collectionConfig = angular.fromJson($scope.collection.collectionConfig);\n      }\n      if (angular.isUndefined($scope.collectionConfig.filterGroups)) {\n        $scope.collectionConfig.filterGroups = [{filterGroup: []}];\n      }\n      collectionService.setFilterCount(filterItemCounter());\n      $scope.loadingCollection = false;\n    }, function(reason) {});\n  };\n  $scope.getCollection();\n  var unbindCollectionObserver = $scope.$watch('collection', function(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      if (angular.isUndefined($scope.filterPropertiesList)) {\n        $scope.filterPropertiesList = {};\n        var filterPropertiesPromise = $slatwall.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);\n        filterPropertiesPromise.then(function(value) {\n          metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);\n          $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);\n          metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);\n        });\n      }\n      unbindCollectionObserver();\n    }\n  });\n  $scope.setCollectionForm = function(form) {\n    $scope.collectionForm = form;\n  };\n  $scope.collectionDetails = {\n    isOpen: false,\n    openCollectionDetails: function() {\n      $scope.collectionDetails.isOpen = true;\n    }\n  };\n  $scope.errorMessage = {};\n  var filterItemCounter = function(filterGroupArray) {\n    var filterItemCount = 0;\n    if (!angular.isDefined(filterGroupArray)) {\n      filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;\n    }\n    for (var index in filterGroupArray) {\n      if (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {\n        filterItemCount++;\n      } else if (angular.isDefined(filterGroupArray[index].filterGroup)) {\n        filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);\n      } else {\n        break;\n      }\n    }\n    return filterItemCount;\n  };\n  $scope.saveCollection = function() {\n    $timeout(function() {\n      $log.debug('saving Collection');\n      var entityName = 'collection';\n      var collection = $scope.collection;\n      $log.debug($scope.collectionConfig);\n      if (isFormValid($scope.collectionForm)) {\n        var collectionConfigString = collectionService.stringifyJSON($scope.collectionConfig);\n        $log.debug(collectionConfigString);\n        var data = angular.copy(collection);\n        data.collectionConfig = collectionConfigString;\n        delete data.pageRecords;\n        var saveCollectionPromise = $slatwall.saveEntity(entityName, collection.collectionID, data);\n        saveCollectionPromise.then(function(value) {\n          $scope.errorMessage = {};\n          paginationService.setCurrentPage(1);\n          $scope.getCollection();\n          $scope.collectionDetails.isOpen = false;\n        }, function(reason) {\n          angular.forEach(reason.errors, function(value, key) {\n            $scope.collectionForm[key].$invalid = true;\n            $scope.errorMessage[key] = value[0];\n          });\n        });\n      }\n      collectionService.setFilterCount(filterItemCounter());\n    });\n  };\n  var isFormValid = function(angularForm) {\n    $log.debug('validateForm');\n    var formValid = true;\n    for (var field in angularForm) {\n      if (field[0] != '$') {\n        if (angularForm[field].$invalid) {\n          formValid = false;\n          for (var error in angularForm[field].$error) {\n            if (error == 'required') {\n              $scope.errorMessage[field] = 'This field is required';\n            }\n          }\n        }\n        if (angularForm[field].$pristine) {\n          if (angular.isUndefined(angularForm[field].$viewValue)) {\n            angularForm[field].$setViewValue(\"\");\n          } else {\n            angularForm[field].$setViewValue(angularForm[field].$viewValue);\n          }\n        }\n      }\n    }\n    return formValid;\n  };\n  $scope.copyExistingCollection = function() {\n    $scope.collection.collectionConfig = $scope.selectedExistingCollection;\n  };\n  $scope.setSelectedExistingCollection = function(selectedExistingCollection) {\n    $scope.selectedExistingCollection = selectedExistingCollection;\n  };\n  $scope.setSelectedFilterProperty = function(selectedFilterProperty) {\n    $scope.selectedFilterProperty = selectedFilterProperty;\n  };\n  $scope.filterCount = collectionService.getFilterCount;\n}]);\n","\"use strict\";\nangular.module('slatwalladmin').controller('collectionsTabController', ['$scope', function($scope) {}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller(\"confirmationController\", [\"$scope\", \"$log\", \"$modalInstance\", function($scope, $log, $modalInstance) {\n  $scope.deleteEntity = function(entity) {\n    $log.debug(\"Deleting an entity.\");\n    $log.debug($scope.entity);\n    this.close();\n  };\n  $scope.close = function() {\n    $modalInstance.close();\n  };\n  $scope.cancel = function() {\n    $modalInstance.dismiss(\"cancel\");\n  };\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller('create-bundle-controller', ['$scope', '$location', '$log', '$rootScope', '$window', '$slatwall', 'dialogService', 'alertService', 'productBundleService', 'formService', 'partialsPath', function($scope, $location, $log, $rootScope, $window, $slatwall, dialogService, alertService, productBundleService, formService, partialsPath) {\n  $scope.partialsPath = partialsPath;\n  function getParameterByName(name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n  }\n  $scope.$id = \"create-bundle-controller\";\n  if (angular.isDefined($scope.scrollToTopOfDialog)) {\n    $scope.scrollToTopOfDialog();\n  }\n  var productID = getParameterByName('productID');\n  var productBundleConstructor = function() {\n    $scope.product = $slatwall.newProduct();\n    var brand = $slatwall.newBrand();\n    var productType = $slatwall.newProductType();\n    $scope.product.$$setBrand(brand);\n    $scope.product.$$setProductType(productType);\n    $scope.product.$$addSku();\n    $scope.product.data.skus[0].data.productBundleGroups = [];\n  };\n  $scope.productBundleGroup;\n  if (angular.isDefined(productID) && productID !== '') {\n    var productPromise = $slatwall.getProduct({id: productID});\n    productPromise.promise.then(function() {\n      $log.debug(productPromise.value);\n      productPromise.value.$$getSkus().then(function() {\n        productPromise.value.data.skus[0].$$getProductBundleGroups().then(function() {\n          $scope.product = productPromise.value;\n          angular.forEach($scope.product.data.skus[0].data.productBundleGroups, function(productBundleGroup) {\n            productBundleGroup.$$getProductBundleGroupType();\n            productBundleService.decorateProductBundleGroup(productBundleGroup);\n            productBundleGroup.data.$$editing = false;\n          });\n        });\n      });\n    }, productBundleConstructor());\n  } else {\n    productBundleConstructor();\n  }\n  $scope.saveProductBundle = function(closeDialogIndex) {\n    $scope.newSaving = true;\n    $log.debug($scope.newSaving);\n    $scope.dIndex = closeDialogIndex;\n    $scope.product.$$save().then(function() {\n      $log.debug(\"Turn off the loader after saving.\");\n      $scope.newSaving = false;\n      if (angular.isDefined($scope.dIndex)) {\n        $scope.closeSaving = true;\n        $rootScope.closePageDialog($scope.dIndex);\n      }\n    });\n  };\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller('globalSearch', ['$scope', '$log', '$window', '$timeout', '$slatwall', function($scope, $log, $window, $timeout, $slatwall) {\n  $scope.keywords = '';\n  $scope.searchResultsOpen = false;\n  $scope.sidebarClass = 'sidebar';\n  $scope.loading = false;\n  $scope.resultsFound = true;\n  $scope.searchResults = {\n    'product': {\n      'title': 'Products',\n      'resultNameFilter': function(data) {\n        return data['productName'];\n      },\n      'results': [],\n      'id': function(data) {\n        return data['productID'];\n      }\n    },\n    'brand': {\n      'title': $slatwall.getRBKey('entity.Brands'),\n      'resultNameFilter': function(data) {\n        return data['brandName'];\n      },\n      'results': [],\n      'id': function(data) {\n        return data['brandID'];\n      }\n    },\n    'account': {\n      'title': 'Accounts',\n      'resultNameFilter': function(data) {\n        return data['firstName'] + ' ' + data['lastName'];\n      },\n      'results': [],\n      'id': function(data) {\n        return data['accountID'];\n      }\n    },\n    'vendor': {\n      'title': 'Vendors',\n      'resultNameFilter': function(data) {\n        return data['vendorName'];\n      },\n      'results': [],\n      'id': function(data) {\n        return data['vendorID'];\n      }\n    }\n  };\n  var _timeoutPromise;\n  var _loadingCount = 0;\n  $scope.updateSearchResults = function() {\n    $scope.loading = true;\n    $scope.showResults();\n    if (_timeoutPromise) {\n      $timeout.cancel(_timeoutPromise);\n    }\n    _timeoutPromise = $timeout(function() {\n      if ($scope.keywords === '') {\n        $scope.hideResults();\n      } else {\n        $scope.showResults();\n        _loadingCount = Object.keys($scope.searchResults).length;\n        for (var entityName in $scope.searchResults) {\n          (function(entityName) {\n            var searchPromise = $slatwall.getEntity(entityName, {\n              keywords: $scope.keywords,\n              pageShow: 4,\n              deferkey: 'global-search-' + entityName\n            });\n            searchPromise.then(function(data) {\n              $scope.searchResults[entityName].results = [];\n              $scope.searchResults[entityName].title = $slatwall.getRBKey('entity.' + entityName.toLowerCase() + '_plural');\n              for (var i in data.pageRecords) {\n                $scope.searchResults[entityName].results.push({\n                  'name': $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),\n                  'link': '?slatAction=entity.detail' + entityName + '&' + entityName + 'ID=' + $scope.searchResults[entityName].id(data.pageRecords[i])\n                });\n              }\n              _loadingCount--;\n              if (_loadingCount == 0) {\n                $scope.loading = false;\n                var _foundResults = false;\n                for (var _thisEntityName in $scope.searchResults) {\n                  if ($scope.searchResults[_thisEntityName].results.length) {\n                    _foundResults = true;\n                    break;\n                  }\n                }\n                $scope.resultsFound = _foundResults;\n              }\n            });\n          })(entityName);\n        }\n      }\n    }, 500);\n  };\n  $scope.showResults = function() {\n    $scope.searchResultsOpen = true;\n    $scope.sidebarClass = 'sidebar s-search-width';\n    $window.onclick = function(event) {\n      var _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains('sidebar');\n      if (!_targetClassOfSearch) {\n        $scope.hideResults();\n        $scope.$apply();\n      }\n    };\n  };\n  $scope.hideResults = function() {\n    $scope.searchResultsOpen = false;\n    $scope.sidebarClass = 'sidebar';\n    $scope.search.$setPristine();\n    $scope.keywords = \"\";\n    $window.onclick = null;\n    $scope.loading = false;\n    $scope.resultsFound = true;\n    for (var entityName in $scope.searchResults) {\n      $scope.searchResults[entityName].results = [];\n    }\n  };\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller('pageDialog', ['$scope', '$location', '$log', '$anchorScroll', '$slatwall', 'dialogService', function($scope, $location, $log, $anchorScroll, $slatwall, dialogService) {\n  $scope.$id = 'pageDialogController';\n  $scope.pageDialogs = dialogService.getPageDialogs();\n  $scope.scrollToTopOfDialog = function() {\n    $location.hash('/#topOfPageDialog');\n    $anchorScroll();\n  };\n  $scope.pageDialogStyle = {\"z-index\": 3000};\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller('preprocessaccount_addaccountpayment', ['$scope', '$compile', function($scope, $compile) {\n  var paymentType = {\n    aptCharge: \"444df32dd2b0583d59a19f1b77869025\",\n    aptCredit: \"444df32e9b448ea196c18c66e1454c46\",\n    aptAdjustment: \"68e3fb57d8102b47acc0003906d16ddd\"\n  };\n  $scope.totalAmountToApply = 0;\n  $scope.paymentTypeName = $.slatwall.rbKey('define.charge');\n  $scope.paymentTypeLock = true;\n  $scope.amount = 0;\n  $scope.updatePaymentType = function() {\n    angular.forEach($scope.appliedOrderPayment, function(obj, key) {\n      if ($scope.paymentType != paymentType.aptAdjustment)\n        obj.paymentType = $scope.paymentType;\n    });\n    if ($scope.paymentType == paymentType.aptCharge) {\n      $scope.paymentTypeName = $.slatwall.rbKey('define.charge');\n      $scope.paymentTypeLock = true;\n    } else if ($scope.paymentType == paymentType.aptCredit) {\n      $scope.paymentTypeName = $.slatwall.rbKey('define.credit');\n      $scope.paymentTypeLock = true;\n    } else if ($scope.paymentType == paymentType.aptAdjustment) {\n      $scope.paymentTypeLock = false;\n      $scope.paymentTypeName = $.slatwall.rbKey('define.adjustment');\n      $scope.amount = 0;\n    }\n    $scope.updateSubTotal();\n  };\n  $scope.updateSubTotal = function() {\n    $scope.totalAmountToApply = 0;\n    angular.forEach($scope.appliedOrderPayment, function(obj, key) {\n      if (obj.amount != undefined && !isNaN(obj.amount)) {\n        if ($scope.paymentType == paymentType.aptCharge || $scope.paymentType == paymentType.aptAdjustment) {\n          if (obj.paymentType == paymentType.aptCharge)\n            $scope.totalAmountToApply += parseFloat(obj.amount);\n          else if (obj.paymentType == paymentType.aptCredit)\n            $scope.totalAmountToApply -= parseFloat(obj.amount);\n        } else if ($scope.paymentType == paymentType.aptCredit) {\n          if (obj.paymentType == paymentType.aptCharge)\n            $scope.totalAmountToApply -= parseFloat(obj.amount);\n          else if (obj.paymentType == paymentType.aptCredit)\n            $scope.totalAmountToApply += parseFloat(obj.amount);\n        }\n      }\n    });\n    $scope.amountUnapplied = (Math.round(($scope.amount - $scope.totalAmountToApply) * 100) / 100);\n    $scope.accountBalanceChange = parseFloat($scope.amount);\n    if ($scope.paymentType == paymentType.aptCharge)\n      $scope.accountBalanceChange = parseFloat($scope.accountBalanceChange * -1);\n    else if ($scope.paymentType == paymentType.aptAdjustment)\n      $scope.accountBalanceChange += parseFloat($scope.amountUnapplied);\n  };\n}]);\n","\"use strict\";\n'use strict';\nangular.module('slatwalladmin').controller('routerController', ['$scope', '$routeParams', '$location', '$log', 'partialsPath', 'baseURL', function($scope, $routeParams, $location, $log, partialsPath, baseURL) {\n  $scope.$id = \"routerController\";\n  $scope.partialRoute = '';\n  $log.debug($routeParams);\n  $log.debug($location);\n  var path = $location.path();\n  $scope.controllerType = path.split('/')[1];\n  var type;\n  if ($scope.controllerType === 'entity') {\n    $scope.entityName = $routeParams.entityName;\n    if (angular.isDefined($routeParams.entityID)) {\n      $scope.entityID = $routeParams.entityID || '';\n    }\n  }\n}]);\n"],"sourceRoot":"/source/"}