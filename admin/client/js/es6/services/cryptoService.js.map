{"version":3,"sources":["services/cryptoService.ts"],"names":[],"mappings":"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","file":"services/cryptoService.js","sourceRoot":"/Users/ianhickey/Sites/Slatwall/","sourcesContent":["/** \n * Handles all methods dealing with hashing and building a signature for the API calls. \n * This angular version of the SHA-1 hash is based on an implementation in JavaScript by Chris Veness 2002-2014 / MIT Licence\n * \n * \n * To use this service, inject it where you need it and add calls to this service whereever you are calling\n * $http.get or post.\n * \n * For Example:\n * var params = {\n                                    locale:locale,\n                                    userid:cryptoService.getSignatureUser(),\n                                    authentication_token:cryptoService.getSecretKey(),\n                                    timestamp: cryptoService.getSignatureTime(),\n                                    signature:cryptoService.getSignature()\n                                };\n                                return $http.get(urlString,{params:params}).success(function(response){\n                                    //do something\n                                }).error(function(response){\n                                   //throw some error.\n                                });\n\n  NOTE: Make sure to add you userid and key below. A key for your account can be generated in the Slatwall Admin by going to Account and \n                adding an API key.\n\n **/\n'use strict'; \nangular.module('slatwalladmin')\n.factory('cryptoService',[ '$log',\n    function($log){\n    //Make sure that String can encode and decode utf8 messages.    \n    if (typeof String.prototype.utf8Encode == 'undefined') {\n        String.prototype.utf8Encode = function() {\n            return unescape( encodeURIComponent( this ) );\n        };\n     }\n            \n    /** Extend String object with method to decode utf8 string to multi-byte */\n    if (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function() {\n        try {\n            return decodeURIComponent( escape( this ) );\n        } catch (e) {\n            return this; // invalid UTF-8? return as-is\n        }\n    };\n    }  \n    var cryptoService = {\n            \n            /**\n             * Returns a new signature based on a unix timestamp, accountID (uid), and secretKey all hashed together\n             * using sha1 algorithm.\n             */\n            getSignature:function(){\n                $log.debug(\"Creating a signature\");\n                //$log.debug(\"Key Plain: \" + \"A1E4E94C-D2A6-3462-235FFD1EF3339E0C\");//This confirms that this algoithm works.\n                //$log.debug(\"Key Sha1: \" + cryptoService.hash(\"A1E4E94C-D2A6-3462-235FFD1EF3339E0C\"));\n                var timeUserKey = cryptoService.getSignatureTime() + '_' + cryptoService.getSignatureUser() + '_' + cryptoService.getSecretKey();\n                //$log.debug(\"timeUserKey: \" + timeUserKey);\n                //hash using sha1\n                var sha1Text =  cryptoService.hash(timeUserKey);\n                //$log.debug(\"Hashed: \" +sha1Text );\n                //encode to base64\n                var upperHash = sha1Text.toUpperCase();\n                var signature = btoa(upperHash);\n                //$log.debug(\"Binary Signature: \" + signature);\n                //return the signature.\n                return signature;\n            },\n            getSignatureTime:function(){\n                return (new Date).getTime();\n            },\n            getSignatureUser:function(){\n                //var uid = \"Your Userid Goes Here\";\n                return \"4028818d4b05b871014b102d388a00db\";\n            },\n            getSecretKey:function(){\n                //var key = \"Your Key Goes Here\";\n                return \"QTFFNEU5NEMtRDJBNi0zNDYyLTIzNUZGRDFFRjMzMzlFMEM=\";\n            },\n            hash:function(msg) {\n                msg = msg.utf8Encode();\n                var K = [ 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6 ];\n                msg += String.fromCharCode(0x80); \n                var l = msg.length/4 + 2; \n                var N = Math.ceil(l/16);\n                var M = new Array(N);\n            \n                for (var i=0; i<N; i++) {\n                    M[i] = new Array(16);\n                    for (var j=0; j<16; j++) {  \n                        M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) |\n                            (msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));\n                    } \n                }\n           \n                M[N-1][14] = ((msg.length-1)*8) / Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14]);\n                M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n            \n                var H0 = 0x67452301;\n                var H1 = 0xefcdab89;\n                var H2 = 0x98badcfe;\n                var H3 = 0x10325476;\n                var H4 = 0xc3d2e1f0;\n            \n                var W = new Array(80); var a, b, c, d, e;\n                for (var i=0; i<N; i++) {\n            \n                    for (var t=0;  t<16; t++) W[t] = M[i][t];\n                    for (var t=16; t<80; t++) W[t] = cryptoService.ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n            \n                    a = H0; b = H1; c = H2; d = H3; e = H4;\n            \n                    for (var t=0; t<80; t++) {\n                        var s = Math.floor(t/20); \n                        var T = (cryptoService.ROTL(a,5) + cryptoService.f(s,b,c,d) + e + K[s] + W[t]) & 0xffffffff;\n                        e = d;\n                        d = c;\n                        c = cryptoService.ROTL(b, 30);\n                        b = a;\n                        a = T;\n                    }\n            \n                    H0 = (H0+a) & 0xffffffff;\n                    H1 = (H1+b) & 0xffffffff;\n                    H2 = (H2+c) & 0xffffffff;\n                    H3 = (H3+d) & 0xffffffff;\n                    H4 = (H4+e) & 0xffffffff;\n                }\n            \n                return cryptoService.toHexStr(H0) + cryptoService.toHexStr(H1) + cryptoService.toHexStr(H2) +\n                       cryptoService.toHexStr(H3) + cryptoService.toHexStr(H4);\n            },\n            f:function(s, x, y, z)  {\n                switch (s) {\n                    case 0: return (x & y) ^ (~x & z);           // Ch()\n                    case 1: return  x ^ y  ^  z;                 // Parity()\n                    case 2: return (x & y) ^ (x & z) ^ (y & z);  // Maj()\n                    case 3: return  x ^ y  ^  z;                 // Parity()\n                }\n            },\n            ROTL:function(x, n) {\n                return (x<<n) | (x>>>(32-n));\n            },\n            toHexStr:function(n) {\n                var s=\"\", v;\n                for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }\n                return s;\n            }    \n        };\n        return cryptoService;\n   }\n]);"]}