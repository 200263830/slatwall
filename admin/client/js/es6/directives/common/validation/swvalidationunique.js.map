{"version":3,"sources":["directives/common/validation/swvalidationunique.ts"],"names":[],"mappings":"AAAA,AAGA;;GADG;AACH,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC,OAAO,EAAC,IAAI,EAAC,WAAW,EAAC,MAAM,EAAG,UAAS,KAAK,EAAC,EAAE,EAAC,SAAS,EAAE,IAAI;QACnI,MAAM,CAAC;YACN,QAAQ,EAAG,GAAG;YACd,OAAO,EAAG,SAAS;YACnB,IAAI,EAAG,UAAS,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO;gBAClD,OAAO,CAAC,gBAAgB,CAAC,kBAAkB,GAAG,UAAU,UAAU,EAAE,SAAS;oBAC5E,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACP,IAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,EACrB,YAAY,GAAG,UAAU,IAAI,SAAS,EACtC,GAAG,GAAG,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EACrD,QAAQ,GAAG,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC;oBAC9C,AAGA,uDAHuD;oBACvD,2CAA2C;oBAC3C,uDAAuD;oBACvD,EAAE,CAAC,CAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC;wBAClB,SAAS,CAAC,gBAAgB,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC;6BACtD,IAAI,CAAC,UAAU,MAAM;4BACrB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;4BACzB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;4BAEhB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACT,QAAQ,CAAC,OAAO,EAAE,EAAE,aAAa;4BACrC,CAAC,GADsB;4BAEvB,IAAI,CAAC,CAAC;gCACF,QAAQ,CAAC,MAAM,EAAE,EAAE,uBAAuB;4BAC9C,CAAC,GADqB;wBAE1B,CAAC,CAAC,CAAC;oBACP,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,QAAQ,CAAC,OAAO,EAAE,EAAE,4CAA4C;oBACnE,CAAC,GADqB;oBAGvB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC5B,CAAC,CAAC;YAEZ,CAAC;SACD,CAAC;IACH,CAAC,CAAC,CAAC,CAAC","file":"directives/common/validation/swvalidationunique.js","sourcesContent":["/**\n * Validates true if the given object is 'unique' and false otherwise.\n */\nangular.module('slatwalladmin').directive(\"swvalidationunique\", ['$http','$q','$slatwall','$log',  function($http,$q,$slatwall, $log) {\n\treturn {\n\t\trestrict : \"A\",\n\t\trequire : \"ngModel\",\n\t\tlink : function(scope, element, attributes, ngModel) {\n\t\t\tngModel.$asyncValidators.swvalidationunique = function (modelValue, viewValue) {\n\t\t\t\t$log.debug('asyc');\n                var deferred = $q.defer(),\n                    currentValue = modelValue || viewValue,\n                    key = scope.propertyDisplay.object.metaData.className,\n                    property = scope.propertyDisplay.property;\n                //First time the asyncValidators function is loaded the\n                //key won't be set  so ensure that we have \n                //key and propertyName before checking with the server \n                if (key && property) {\n                    $slatwall.checkUniqueValue(key, property, currentValue)\n                    .then(function (unique) {\n                    \t$log.debug('uniquetest');\n                    \t$log.debug(unique);\n                    \t\n                        if (unique) {\n                            deferred.resolve(); //It's unique\n                        }\n                        else {\n                            deferred.reject(); //Add unique to $errors\n                        }\n                    });\n                }\n                else {\n                    deferred.resolve(); //Ensure promise is resolved if we hit this \n                 }\n\n                return deferred.promise;\n            };\n\t\t\t\n\t\t}\n\t};\n}]);"],"sourceRoot":"/source/"}