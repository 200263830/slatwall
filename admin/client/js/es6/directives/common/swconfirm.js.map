{"version":3,"sources":["directives/common/swconfirm.ts"],"names":[],"mappings":"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","file":"directives/common/swconfirm.js","sourcesContent":["/**\n * <------------------------------------------------------------------------------------------------------------------------------------>\n *   This directive can be used to prompt the user with a confirmation dialog.\n *   \n *   Example Usage 1: \n *   <a swconfirm \n *   \t\t\t\t\t\tuse-rb-key=true \n * \t\t\t\t\t\t\tyes-text=\"define.yes\" \n * \t\t\t\t\t\t\tno-text=\"define.no\" \n * \t\t\t\t\t\t\tconfirm-text=\"define.confirm\" \n * \t\t\t\t\t\t\tmessage-text=\"define.delete.message\" \n * \t\t\t\t\t\t\tcallback=\"someFunction()\">\n *   </a>\n *   Alternate Version (No Rbkeys):\n *   <a swconfirm \n *   \t\t\t\t\t\tuse-rb-key=false \n * \t\t\t\t\t\t\tyes-text=\"Sure\" \n * \t\t\t\t\t\t\tno-text=\"Not Sure!\" \n * \t\t\t\t\t\t\tconfirm-text=\"Sure\" \n * \t\t\t\t\t\t\tmessage-text=\"Are you sure?\" \n * \t\t\t\t\t\t\tcallback=\"sure()\">\n *   </a>\n * \n *   Note: Because the template is dynamic, the following keywords can not be used anywhere in the text for this modal.\n *   \n *   [yes] [no] [confirm] [message] [callback]\n *   \n *   The above words in upper-case can be used - just not those words inside square brackets.\n *   Note: Your callback function on-confirm should return true;\n *<------------------------------------------------------------------------------------------------------------------------------------->\n */\nangular.module('slatwalladmin').directive('swConfirm', \n ['$slatwall', '$log','$compile','$modal','partialsPath',   \n    function($slatwall, $log, $compile, $modal, partialsPath){\n        \n    \t\tvar buildConfirmationModal = function( simple, useRbKey, confirmText, messageText, noText, yesText, callback){\n    \t\t\t\n    \t\t\t/* Keys */\n    \t\t\tvar confirmKey = \"[confirm]\";\n    \t\t\tvar messageKey = \"[message]\";\n    \t\t\tvar noKey = \"[no]\";\n    \t\t\tvar yesKey = \"[yes]\";\n    \t\t\tvar callbackKey = \"[callback]\";\n    \t\t\tvar swRbKey = \"sw-rbkey=\";\n    \t\t\t\n    \t\t\t/* Values */\n    \t\t\tvar confirmVal = \"<confirm>\";\n    \t\t\tvar messageVal = \"<message>\";\n    \t\t\tvar noVal = \"<no>\";\n    \t\t\tvar yesVal = \"<yes>\";\n    \t\t\tvar callbackVal = \"<callback>\";\n    \t\t\t\n    \t\t\t/* Parse Tags */\n    \t\t\tvar startTag = \"\\\"'\";\n    \t\t\tvar endTag = \"'\\\"\";\n    \t\t\tvar startParen = \"'\";\n    \t\t\tvar endParen = \"'\";\n    \t\t\tvar empty = \"\";\n    \t\t\t\n    \t\t\t/* Modal String */\n    \t\t\tvar parsedKeyString = \"\";\n    \t\t\tvar finishedString = \"\";\n    \t\t\t\n    \t\t\t//Figure out which version of this tag we are using\n    \t\t\t\n    \t\t\tvar templateString = \n                        \"<div>\" +\n                        \t\"<div class='modal-header'><a class='close' data-dismiss='modal' ng-click='cancel()'>Ã—</a><h3 [confirm]><confirm></h3></div>\" +\n                        \"<div class='modal-body' [message]>\" + \"<message>\" + \"</div>\" +\n                        \t\"<div class='modal-footer'>\" +\n                        \t\"<button class='btn btn-sm btn-default btn-inverse' ng-click='cancel()' [no]><no></button>\" +\n                        \t\"<button class='btn btn-sm btn-default btn-primary' ng-click='[callback]' [yes]><yes></button></div></div></div>\";\n    \t\t\t\t\n    \t\t\t\n    \t\t\t\n    \t\t\t/* Use RbKeys or Not? */\n    \t\t\tif (useRbKey === \"true\"){\n    \t\t\t\t$log.debug(\"Using RbKey? \" + useRbKey);\n    \t\t\t\t/* Then decorate the template with the keys. */\n    \t\t\t\tconfirmText \t\t\t= swRbKey + startTag + confirmText + endTag;\n    \t\t\t\tmessageText \t\t= swRbKey + startTag + messageText + endTag;\n    \t\t\t\tyesText \t\t\t\t= swRbKey + startTag + yesText + endTag;\n    \t\t\t\tnoText \t\t\t\t\t= swRbKey + startTag + noText + endTag;\n    \t\t\t\t\n    \t\t\t\tparsedKeyString \t= templateString.replace(confirmKey, confirmText)\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(messageText, messageText)\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(noKey, noText)\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(yesKey, yesText)\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(callback, callback);\n    \t\t\t\t$log.debug(finishedString);\n    \t\t\t\tfinishedString\t = parsedKeyString.replace(confirm, empty)\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(messageVal, empty)\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(noVal, empty)\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(yesVal, empty);\n    \t\t\t\t$log.debug(finishedString);\n    \t\t\t\treturn finishedString;\n        \t\t}else{\n        \t\t\t/* Then decorate the template without the keys. */\n        \t\t\t$log.debug(\"Using RbKey? \" + useRbKey);\n        \t\t\tparsedKeyString  = templateString.replace(confirmVal, confirmText)\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(messageVal, messageText)\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(noVal, noText)\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(yesVal, yesText)\n        \t\t\tfinishedString\t= parsedKeyString.replace(confirmKey, empty)\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .replace(messageKey, empty)\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .replace(noKey, empty)\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .replace(yesKey, empty)\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .replace(callbackKey, callback);\n        \t\t\t$log.debug(finishedString);\n        \t\t\treturn finishedString;\n        \t\t}\n    \t\t};\n        return {\n        \t\trestrict: 'EA',\n        \t\tscope: {\n        \t          callback:\"&\",\n        \t          entity:\"=\"\n        \t        },\n            link: function (scope, element, attr) {\n            \t/* Grab the template and build the modal on click */\n            $log.debug(\"Modal is: \");\n            $log.debug($modal);\n            \telement.bind('click', function() {\n            \t\t\t/* Default Values */\n                \t   \tvar useRbKey = attr.useRbKey   \t\t\t\t\t\t|| \"false\";\n                \t   \tvar simple = attr.simple\t\t\t\t\t\t\t\t\t||  false;\n                \t   \tvar yesText = attr.yesText\t\t\t\t\t\t\t\t\t|| \"define.yes\";\n                \t   \tvar noText  = attr.noText  \t\t\t\t\t\t\t\t|| \"define.no\";\n                    var confirmText = attr.confirmText \t\t\t\t\t|| \"define.delete\";\n                    var messageText = attr.messageText\t\t\t\t|| \"define.delete_message\";\n                    var callback = attr.callback    \t\t\t\t\t\t\t|| \"onSuccess()\";\n                    var templateString = buildConfirmationModal(simple, useRbKey, confirmText, messageText, noText, yesText, callback);\n                      \n                    var modalInstance = $modal.open({\n                      template: templateString,\n                      controller: 'confirmationController'\n                    });\n                    \n                    /**\n                     * Handles the result - callback or dismissed\n                     */\n                    modalInstance.result.then(function(result) {\n                        $log.debug(\"Result:\" + result);\n                    \t\tscope.callback();\n                    \t\treturn true;\n                    }, function() {\n                        //There was an error\n                 }); \n             });//<--end bind \t\n           }  \n        };\n}]);\n\n\t"],"sourceRoot":"/source/"}