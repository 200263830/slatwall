{"version":3,"sources":["alertservice.js","collectionservice.js","dialogservice.js","formservice.js","metadataservice.js","paginationservice.js","productbundleservice.js","slatwallInterceptor.js","alertcontroller.js","collections.js","collectionstabcontroller.js","confirmationcontroller.js","create-bundle-controller.js","globalsearch.js","pagedialog.js","preprocessaccount_addaccountpayment.js","routercontroller.js"],"names":["angular","module","factory","$timeout","_alerts","alertService","addAlert","alert","push","splice","addAlerts","alerts","formatMessagesToAlerts","messages","message","msg","type","messageType","fade","dismissable","getAlerts","removeAlert","i","removeOldestAlert","_alert","$filter","$log","_collection","_filterPropertiesList","_filterCount","_orderBy","collectionService","setFilterCount","number","debug","getFilterCount","getColumns","collectionConfig","columns","getFilterPropertiesList","getFilterPropertiesListByBaseEntityAlias","baseEntityAlias","setFilterPropertiesList","value","key","isUndefined","stringifyJSON","jsonObject","jsonString","toJson","removeFilterItem","filterItem","filterGroup","pop","indexOf","selectFilterItem","$$isClosed","$$siblingItems","$$disabled","setItemInUse","selectFilterGroupItem","filterGroupItem","newFilterItem","filterItemGroup","prepareForFilterGroup","displayPropertyIdentifier","propertyIdentifier","comparisonOperator","$$isNew","length","logicalOperator","$$prepareForFilterGroup","this","newFilterGroupItem","transplantFilterItemIntoFilterGroup","isDefined","formatFilterPropertiesList","filterPropertiesList","simpleGroup","$$group","data","drillDownGroup","compareCollections","attributeCollections","ormtype","attributeID","fieldtype","name","orderBy","propertiesList","predicate","reverse","partialsPath","_pageDialogs","dialogService","addPageDialog","newDialog","path","removePageDialog","index","getPageDialogs","form","object","editing","_forms","_pristinePropertyValue","formService","setPristinePropertyValue","property","getPristinePropertyValue","clearForm","charAt","setForm","getForm","formName","getForms","getFormsByObjectName","objectName","forms","f","$$swFormInfo","metaData","className","createForm","_form","resetForm","$setViewValue","$render","$submitted","$setPristine","_propertiesList","metadataService","getPropertiesList","getPropertiesListByBaseEntityAlias","setPropertiesList","formatPropertiesList","temp","sort","_pageShowOptions","display","_pageShow","_currentPage","_pageStart","_pageEnd","_recordsCount","_totalPages","paginationService","getTotalPages","setTotalPages","totalPages","getPageStart","setPageStart","pageStart","getPageEnd","setPageEnd","pageEnd","getRecordsCount","setRecordsCount","recordsCount","getPageShowOptions","setPageShowOptions","pageShowOptions","getPageShow","setPageShow","pageShow","getCurrentPage","setCurrentPage","currentPage","previousPage","hasPrevious","nextPage","hasNext","$slatwall","utilityService","productBundleService","decorateProductBundleGroup","productBundleGroup","$$editing","prototype","$$setMinimumQuantity","quantity","minimumQuantity","maximumQuantity","$$setMaximumQuantity","$$setActive","active","$$toggleEdit","extend","formatProductBundleGroupFilters","productBundelGroupFilters","filterTerm","entityType","arraySorter","$q","interceptor","request","config","method","url","params","serializedJsonData","context","$","param","headers","response","requestError","rejection","reject","responseError","status","controller","$scope","$id","$location","QueryString","query_string","query","window","location","search","substring","vars","split","pair","arr","collectionID","autoScrollPage","autoScrollDisabled","appendToCollection","collection","collectionListingPromise","getEntity","id","then","pageRecords","concat","reason","keywords","loadingCollection","searchPromise","searchCollection","$timout","cancel","getCollection","collectionInitial","copy","fromJson","filterGroups","filterItemCounter","unbindCollectionObserver","$watch","newValue","oldValue","filterPropertiesPromise","getFilterPropertiesByBaseEntityName","setCollectionForm","collectionForm","collectionDetails","isOpen","openCollectionDetails","errorMessage","filterGroupArray","filterItemCount","saveCollection","entityName","isFormValid","collectionConfigString","saveCollectionPromise","saveEntity","forEach","errors","$invalid","angularForm","formValid","field","error","$error","$pristine","$viewValue","copyExistingCollection","selectedExistingCollection","setSelectedExistingCollection","setSelectedFilterProperty","selectedFilterProperty","filterCount","$modalInstance","deleteEntity","entity","close","dismiss","$rootScope","$window","getParameterByName","replace","regex","RegExp","results","exec","decodeURIComponent","scrollToTopOfDialog","productID","productBundleConstructor","product","newProduct","brand","newBrand","productType","newProductType","$$setBrand","$$setProductType","$$addSku","skus","productBundleGroups","productPromise","getProduct","promise","$$getSkus","$$getProductBundleGroups","$$getProductBundleGroupType","saveProductBundle","closeDialogIndex","newSaving","dIndex","$$save","closeSaving","closePageDialog","searchResultsOpen","sidebarClass","loading","resultsFound","searchResults","title","resultNameFilter","productName","getRBKey","brandName","brandID","account","firstName","lastName","accountID","vendor","vendorName","vendorID","_timeoutPromise","_loadingCount","updateSearchResults","showResults","hideResults","Object","keys","deferkey","toLowerCase","link","_foundResults","_thisEntityName","onclick","event","_targetClassOfSearch","target","parentElement","offsetParent","classList","contains","$apply","$anchorScroll","pageDialogs","hash","pageDialogStyle","z-index","$compile","paymentType","aptCharge","aptCredit","aptAdjustment","totalAmountToApply","paymentTypeName","slatwall","rbKey","paymentTypeLock","amount","updatePaymentType","appliedOrderPayment","obj","updateSubTotal","undefined","isNaN","parseFloat","amountUnapplied","Math","round","accountBalanceChange","$routeParams","baseURL","partialRoute","controllerType","entityID"],"mappings":"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","file":"all.min.js","sourcesContent":["/*services return promises which can be handled uniquely based on success or failure by the controller*/\n\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"alertService\", [\"$timeout\", function ($timeout) {\n\tvar _alerts = [];\n\n\tvar alertService = {\n\t\taddAlert: function (alert) {\n\t\t\t_alerts.push(alert);\n\t\t\t$timeout(function () {\n\t\t\t\t_alerts.splice(0, 1);\n\t\t\t}, 3500);\n\t\t},\n\t\taddAlerts: function (alerts) {\n\t\t\tfor (var alert in alerts) {\n\t\t\t\t_alerts.push(alerts[alert]);\n\t\t\t\t$timeout(function () {\n\t\t\t\t\t_alerts.splice(0, 1);\n\t\t\t\t}, 3500);\n\t\t\t}\n\t\t},\n\t\tformatMessagesToAlerts: function (messages) {\n\t\t\tvar alerts = [];\n\t\t\tfor (var message in messages) {\n\t\t\t\tvar alert = {\n\t\t\t\t\tmsg: messages[message].message,\n\t\t\t\t\ttype: messages[message].messageType\n\t\t\t\t};\n\t\t\t\talerts.push(alert);\n\t\t\t\tif (alert.type === \"success\" || alert.type === \"error\") {\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\talert.fade = true;\n\t\t\t\t\t}, 3500);\n\n\t\t\t\t\talert.dismissable = false;\n\t\t\t\t} else {\n\t\t\t\t\talert.fade = false;\n\t\t\t\t\talert.dismissable = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn alerts;\n\t\t},\n\t\tgetAlerts: function () {\n\t\t\treturn _alerts;\n\t\t},\n\t\tremoveAlert: function (alert) {\n\t\t\tfor (var i in _alerts) {\n\t\t\t\tif (_alerts[i] === alert) {\n\t\t\t\t\tdelete _alerts[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremoveOldestAlert: function () {\n\t\t\t_alert.splice(0, 1);\n\t\t}\n\t};\n\n\treturn alertService;\n}]);","/*collection service is used to maintain the state of the ui*/\n\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"collectionService\", [\"$filter\", \"$log\", function ($filter, $log) {\n\t/*properties*/\n\tvar _collection = null;\n\tvar _collectionConfig = null;\n\tvar _filterPropertiesList = {};\n\tvar _filterCount = 0;\n\tvar _orderBy = $filter(\"orderBy\");\n\n\tvar collectionService = {\n\t\tsetFilterCount: function (number) {\n\t\t\t$log.debug(\"incrementFilterCount\");\n\t\t\t_filterCount = number;\n\t\t},\n\t\tgetFilterCount: function () {\n\t\t\treturn _filterCount;\n\t\t},\n\n\t\tgetColumns: function () {\n\t\t\treturn _collection.collectionConfig.columns;\n\t\t},\n\t\tgetFilterPropertiesList: function () {\n\t\t\treturn _filterPropertiesList;\n\t\t},\n\t\tgetFilterPropertiesListByBaseEntityAlias: function (baseEntityAlias) {\n\t\t\treturn _filterPropertiesList[baseEntityAlias];\n\t\t},\n\t\tsetFilterPropertiesList: function (value, key) {\n\t\t\tif (angular.isUndefined(_filterPropertiesList[key])) {\n\t\t\t\t_filterPropertiesList[key] = value;\n\t\t\t}\n\t\t},\n\n\t\tstringifyJSON: function (jsonObject) {\n\t\t\tvar jsonString = angular.toJson(jsonObject);\n\t\t\treturn jsonString;\n\t\t},\n\t\tremoveFilterItem: function (filterItem, filterGroup) {\n\t\t\tfilterGroup.pop(filterGroup.indexOf(filterItem));\n\t\t},\n\t\tselectFilterItem: function (filterItem) {\n\t\t\tif (filterItem.$$isClosed) {\n\t\t\t\tfor (var i in filterItem.$$siblingItems) {\n\t\t\t\t\tfilterItem.$$siblingItems[i].$$isClosed = true;\n\t\t\t\t\tfilterItem.$$siblingItems[i].$$disabled = true;\n\t\t\t\t}\n\t\t\t\tfilterItem.$$isClosed = false;\n\t\t\t\tfilterItem.$$disabled = false;\n\t\t\t\tfilterItem.setItemInUse(true);\n\t\t\t} else {\n\t\t\t\tfor (var i in filterItem.$$siblingItems) {\n\t\t\t\t\tfilterItem.$$siblingItems[i].$$disabled = false;\n\t\t\t\t}\n\t\t\t\tfilterItem.$$isClosed = true;\n\t\t\t\tfilterItem.setItemInUse(false);\n\t\t\t}\n\t\t},\n\t\tselectFilterGroupItem: function (filterGroupItem) {\n\t\t\tif (filterGroupItem.$$isClosed) {\n\t\t\t\tfor (var i in filterGroupItem.$$siblingItems) {\n\t\t\t\t\tfilterGroupItem.$$siblingItems[i].$$disabled = true;\n\t\t\t\t}\n\t\t\t\tfilterGroupItem.$$isClosed = false;\n\t\t\t\tfilterGroupItem.$$disabled = false;\n\t\t\t} else {\n\t\t\t\tfor (var i in filterGroupItem.$$siblingItems) {\n\t\t\t\t\tfilterGroupItem.$$siblingItems[i].$$disabled = false;\n\t\t\t\t}\n\t\t\t\tfilterGroupItem.$$isClosed = true;\n\t\t\t}\n\t\t\tfilterGroupItem.setItemInUse(!filterGroupItem.$$isClosed);\n\t\t},\n\t\tnewFilterItem: function (filterItemGroup, setItemInUse, prepareForFilterGroup) {\n\t\t\tif (angular.isUndefined(prepareForFilterGroup)) {\n\t\t\t\tprepareForFilterGroup = false;\n\t\t\t}\n\t\t\tvar filterItem = {\n\t\t\t\tdisplayPropertyIdentifier: \"\",\n\t\t\t\tpropertyIdentifier: \"\",\n\t\t\t\tcomparisonOperator: \"\",\n\t\t\t\tvalue: \"\",\n\t\t\t\t$$disabled: false,\n\t\t\t\t$$isClosed: true,\n\t\t\t\t$$isNew: true,\n\t\t\t\t$$siblingItems: filterItemGroup,\n\t\t\t\tsetItemInUse: setItemInUse\n\t\t\t};\n\t\t\tif (filterItemGroup.length !== 0) {\n\t\t\t\tfilterItem.logicalOperator = \"AND\";\n\t\t\t}\n\n\t\t\tif (prepareForFilterGroup === true) {\n\t\t\t\tfilterItem.$$prepareForFilterGroup = true;\n\t\t\t}\n\n\t\t\tfilterItemGroup.push(filterItem);\n\n\n\t\t\tthis.selectFilterItem(filterItem);\n\n\t\t},\n\t\tnewFilterGroupItem: function (filterItemGroup, setItemInUse) {\n\t\t\tvar filterGroupItem = {\n\t\t\t\tfilterGroup: [],\n\t\t\t\t$$disabled: \"false\",\n\t\t\t\t$$isClosed: \"true\",\n\t\t\t\t$$siblingItems: filterItemGroup,\n\t\t\t\t$$isNew: \"true\",\n\t\t\t\tsetItemInUse: setItemInUse\n\t\t\t};\n\t\t\tif (filterItemGroup.length !== 0) {\n\t\t\t\tfilterGroupItem.logicalOperator = \"AND\";\n\t\t\t}\n\t\t\tfilterItemGroup.push(filterGroupItem);\n\t\t\tcollectionService.selectFilterGroupItem(filterGroupItem);\n\n\t\t\tthis.newFilterItem(filterGroupItem.filterGroup, setItemInUse);\n\t\t},\n\t\ttransplantFilterItemIntoFilterGroup: function (filterGroup, filterItem) {\n\t\t\tvar filterGroupItem = {\n\t\t\t\tfilterGroup: [],\n\t\t\t\t$$disabled: \"false\",\n\t\t\t\t$$isClosed: \"true\",\n\t\t\t\t$$isNew: \"true\"\n\t\t\t};\n\t\t\tif (angular.isDefined(filterItem.logicalOperator)) {\n\t\t\t\tfilterGroupItem.logicalOperator = filterItem.logicalOperator;\n\t\t\t\tdelete filterItem.logicalOperator;\n\t\t\t}\n\t\t\tfilterGroupItem.setItemInUse = filterItem.setItemInUse;\n\t\t\tfilterGroupItem.$$siblingItems = filterItem.$$siblingItems;\n\t\t\tfilterItem.$$siblingItems = [];\n\n\n\t\t\tfilterGroup.pop(filterGroup.indexOf(filterItem));\n\t\t\tfilterItem.$$prepareForFilterGroup = false;\n\t\t\tfilterGroupItem.filterGroup.push(filterItem);\n\t\t\tfilterGroup.push(filterGroupItem);\n\t\t},\n\n\t\tformatFilterPropertiesList: function (filterPropertiesList, propertyIdentifier) {\n\t\t\t$log.debug(\"format Filter Properties List arguments 2\");\n\t\t\t$log.debug(filterPropertiesList);\n\t\t\t$log.debug(propertyIdentifier);\n\t\t\tvar simpleGroup = {\n\t\t\t\t$$group: \"simple\",\n\t\t\t\tdisplayPropertyIdentifier: \"-----------------\"\n\t\t\t};\n\n\t\t\tfilterPropertiesList.data.push(simpleGroup);\n\t\t\tvar drillDownGroup = {\n\t\t\t\t$$group: \"drilldown\",\n\t\t\t\tdisplayPropertyIdentifier: \"-----------------\"\n\t\t\t};\n\n\t\t\tfilterPropertiesList.data.push(drillDownGroup);\n\n\t\t\tvar compareCollections = {\n\t\t\t\t$$group: \"compareCollections\",\n\t\t\t\tdisplayPropertyIdentifier: \"-----------------\"\n\t\t\t};\n\n\t\t\tfilterPropertiesList.data.push(compareCollections);\n\n\t\t\tvar attributeCollections = {\n\t\t\t\t$$group: \"attribute\",\n\t\t\t\tdisplayPropertyIdentifier: \"-----------------\"\n\t\t\t};\n\n\t\t\tfilterPropertiesList.data.push(attributeCollections);\n\n\t\t\tfor (var i in filterPropertiesList.data) {\n\t\t\t\tif (angular.isDefined(filterPropertiesList.data[i].ormtype)) {\n\t\t\t\t\tif (angular.isDefined(filterPropertiesList.data[i].attributeID)) {\n\t\t\t\t\t\tfilterPropertiesList.data[i].$$group = \"attribute\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfilterPropertiesList.data[i].$$group = \"simple\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (angular.isDefined(filterPropertiesList.data[i].fieldtype)) {\n\t\t\t\t\tif (filterPropertiesList.data[i].fieldtype === \"id\") {\n\t\t\t\t\t\tfilterPropertiesList.data[i].$$group = \"simple\";\n\t\t\t\t\t}\n\t\t\t\t\tif (filterPropertiesList.data[i].fieldtype === \"many-to-one\") {\n\t\t\t\t\t\tfilterPropertiesList.data[i].$$group = \"drilldown\";\n\t\t\t\t\t}\n\t\t\t\t\tif (filterPropertiesList.data[i].fieldtype === \"many-to-many\" || filterPropertiesList.data[i].fieldtype === \"one-to-many\") {\n\t\t\t\t\t\tfilterPropertiesList.data[i].$$group = \"compareCollections\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfilterPropertiesList.data[i].propertyIdentifier = propertyIdentifier + \".\" + filterPropertiesList.data[i].name;\n\t\t\t}\n\t\t\tfilterPropertiesList.data = _orderBy(filterPropertiesList.data, [\"-$$group\", \"propertyIdentifier\"], false);\n\t\t},\n\n\t\torderBy: function (propertiesList, predicate, reverse) {\n\t\t\treturn _orderBy(propertiesList, predicate, reverse);\n\t\t}\n\n\t};\n\n\treturn collectionService;\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"dialogService\", [\"partialsPath\", function (partialsPath) {\n\tvar _pageDialogs = [];\n\n\tvar dialogService = {\n\n\t\taddPageDialog: function (name) {\n\t\t\tvar newDialog = {\n\t\t\t\tpath: partialsPath + name + \".html\"\n\t\t\t};\n\t\t\t_pageDialogs.push(newDialog);\n\t\t},\n\n\t\tremovePageDialog: function (index) {\n\t\t\t_pageDialogs.splice(index, 1);\n\t\t},\n\n\t\tgetPageDialogs: function () {\n\t\t\treturn _pageDialogs;\n\t\t}\n\t};\n\n\treturn dialogService;\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"formService\", [\"$log\", function ($log) {\n\tvar _forms = {};\n\tvar _pristinePropertyValue = {};\n\n\tfunction form(name, object, editing) {\n\t\tthis.name = name;\n\t\tthis.object = object;\n\t\tthis.editing = editing;\n\t};\n\n\tvar formService = {\n\t\tsetPristinePropertyValue: function (property, value) {\n\t\t\t_pristinePropertyValue[property] = value;\n\t\t},\n\t\tgetPristinePropertyValue: function (property) {\n\t\t\treturn _pristinePropertyValue[property];\n\t\t},\n\t\tclearForm: function (form) {\n\t\t\t$log.debug(\"clear form\");\n\t\t\t$log.debug(form);\n\t\t\tfor (var key in form) {\n\t\t\t\tif (key.charAt(0) !== \"$\") {\n\t\t\t\t\t$log.debug(form[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsetForm: function (form) {\n\t\t\t_forms[form.name] = form;\n\t\t},\n\t\tgetForm: function (formName) {\n\t\t\treturn _forms[formName];\n\t\t},\n\t\tgetForms: function () {\n\t\t\treturn _forms;\n\t\t},\n\t\tgetFormsByObjectName: function (objectName) {\n\t\t\tvar forms = [];\n\t\t\tfor (var f in _forms) {\n\t\t\t\tif (angular.isDefined(_forms[f].$$swFormInfo.object) && _forms[f].$$swFormInfo.object.metaData.className === objectName) {\n\t\t\t\t\tforms.push(_forms[f]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn forms;\n\t\t},\n\t\tcreateForm: function (name, object, editing) {\n\t\t\tvar _form = new form(name, object, editing);\n\t\t\tthis.setForm(_form);\n\t\t\treturn _form;\n\t\t},\n\t\tresetForm: function (form) {\n\t\t\tfor (var key in form) {\n\t\t\t\tif (key.charAt(0) !== \"$\") {\n\t\t\t\t\tif (angular.isDefined(this.getPristinePropertyValue(key))) {\n\t\t\t\t\t\tform[key].$setViewValue(this.getPristinePropertyValue(key));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tform[key].$setViewValue(\"\");\n\t\t\t\t\t}\n\t\t\t\t\tform[key].$render();\n\t\t\t\t}\n\t\t\t}\n\t\t\tform.$submitted = false;\n\t\t\tform.$setPristine();\n\t\t}\n\n\t};\n\n\treturn formService;\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"metadataService\", [\"$filter\", \"$log\", function ($filter, $log) {\n\tvar _propertiesList = {};\n\tvar _orderBy = $filter(\"orderBy\");\n\n\tvar metadataService = {\n\t\tgetPropertiesList: function () {\n\t\t\treturn _propertiesList;\n\t\t},\n\t\tgetPropertiesListByBaseEntityAlias: function (baseEntityAlias) {\n\t\t\treturn _propertiesList[baseEntityAlias];\n\t\t},\n\t\tsetPropertiesList: function (value, key) {\n\t\t\t_propertiesList[key] = value;\n\t\t},\n\t\tformatPropertiesList: function (propertiesList, propertyIdentifier) {\n\t\t\tvar simpleGroup = {\n\t\t\t\t$$group: \"simple\" };\n\n\t\t\tpropertiesList.data.push(simpleGroup);\n\t\t\tvar drillDownGroup = {\n\t\t\t\t$$group: \"drilldown\" };\n\n\t\t\tpropertiesList.data.push(drillDownGroup);\n\n\t\t\tvar compareCollections = {\n\t\t\t\t$$group: \"compareCollections\" };\n\n\t\t\tpropertiesList.data.push(compareCollections);\n\n\t\t\tvar attributeCollections = {\n\t\t\t\t$$group: \"attribute\" };\n\n\t\t\tpropertiesList.data.push(attributeCollections);\n\n\n\t\t\tfor (var i in propertiesList.data) {\n\t\t\t\tif (angular.isDefined(propertiesList.data[i].ormtype)) {\n\t\t\t\t\tif (angular.isDefined(propertiesList.data[i].attributeID)) {\n\t\t\t\t\t\tpropertiesList.data[i].$$group = \"attribute\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpropertiesList.data[i].$$group = \"simple\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (angular.isDefined(propertiesList.data[i].fieldtype)) {\n\t\t\t\t\tif (propertiesList.data[i].fieldtype === \"id\") {\n\t\t\t\t\t\tpropertiesList.data[i].$$group = \"simple\";\n\t\t\t\t\t}\n\t\t\t\t\tif (propertiesList.data[i].fieldtype === \"many-to-one\") {\n\t\t\t\t\t\tpropertiesList.data[i].$$group = \"drilldown\";\n\t\t\t\t\t}\n\t\t\t\t\tif (propertiesList.data[i].fieldtype === \"many-to-many\" || propertiesList.data[i].fieldtype === \"one-to-many\") {\n\t\t\t\t\t\tpropertiesList.data[i].$$group = \"compareCollections\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpropertiesList.data[i].propertyIdentifier = propertyIdentifier + \".\" + propertiesList.data[i].name;\n\t\t\t}\n\t\t\t//propertiesList.data = _orderBy(propertiesList.data,['displayPropertyIdentifier'],false);\n\n\t\t\t//--------------------------------Removes empty lines from dropdown.\n\t\t\tvar temp = [];\n\t\t\tfor (var i = 0; i <= propertiesList.data.length - 1; i++) {\n\t\t\t\tif (propertiesList.data[i].propertyIdentifier.indexOf(\".undefined\") != -1) {\n\t\t\t\t\t$log.debug(\"removing: \" + propertiesList.data[i].displayPropertyIdentifier);\n\t\t\t\t\tpropertiesList.data[i].displayPropertyIdentifier = \"hide\";\n\t\t\t\t} else {\n\t\t\t\t\ttemp.push(propertiesList.data[i]);\n\t\t\t\t\t$log.debug(propertiesList.data[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp.sort;\n\t\t\tpropertiesList.data = temp;\n\t\t\t$log.debug(\"----------------------PropertyList\\n\\n\\n\\n\\n\");\n\t\t\tpropertiesList.data = _orderBy(propertiesList.data, [\"propertyIdentifier\"], false);\n\n\n\t\t\t//--------------------------------End remove empty lines.\n\t\t},\n\n\t\torderBy: function (propertiesList, predicate, reverse) {\n\t\t\treturn _orderBy(propertiesList, predicate, reverse);\n\t\t}\n\n\t};\n\n\treturn metadataService;\n}]);\n//displayPropertyIdentifier:'-----------------'\n//displayPropertyIdentifier:'-----------------'\n//displayPropertyIdentifier:'-----------------'\n//displayPropertyIdentifier:'-----------------'","\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"paginationService\", [function () {\n\tvar _pageRecords = [];\n\tvar _pageShowOptions = [{ display: 10, value: 10 }, { display: 20, value: 20 }, { display: 50, value: 50 }, { display: 250, value: 250 }, { display: \"Auto\", value: \"Auto\" }];\n\tvar _pageShow = 10;\n\tvar _currentPage = 1;\n\tvar _pageStart = 0;\n\tvar _pageEnd = 0;\n\tvar _recordsCount = 0;\n\tvar _totalPages = 0;\n\n\tvar paginationService = {\n\n\t\tgetTotalPages: function () {\n\t\t\treturn _totalPages;\n\t\t},\n\t\tsetTotalPages: function (totalPages) {\n\t\t\t_totalPages = totalPages;\n\t\t},\n\t\tgetPageStart: function () {\n\t\t\treturn _pageStart;\n\t\t},\n\t\tsetPageStart: function (pageStart) {\n\t\t\t_pageStart = pageStart;\n\t\t},\n\t\tgetPageEnd: function () {\n\t\t\treturn _pageEnd;\n\t\t},\n\t\tsetPageEnd: function (pageEnd) {\n\t\t\t_pageEnd = pageEnd;\n\t\t},\n\t\tgetRecordsCount: function () {\n\t\t\treturn _recordsCount;\n\t\t},\n\t\tsetRecordsCount: function (recordsCount) {\n\t\t\t_recordsCount = recordsCount;\n\t\t},\n\t\tgetPageShowOptions: function () {\n\t\t\treturn _pageShowOptions;\n\t\t},\n\t\tsetPageShowOptions: function (pageShowOptions) {\n\t\t\t_pageShowOptions = pageShowOptions;\n\t\t},\n\t\tgetPageShow: function () {\n\t\t\treturn _pageShow;\n\t\t},\n\t\tsetPageShow: function (pageShow) {\n\t\t\t_pageShow = pageShow;\n\t\t},\n\t\tgetCurrentPage: function () {\n\t\t\treturn _currentPage;\n\t\t},\n\t\tsetCurrentPage: function (currentPage) {\n\t\t\t_currentPage = currentPage;\n\t\t},\n\t\tpreviousPage: function () {\n\t\t\tif (!this.hasPrevious()) {\n\t\t\t\t_currentPage = this.getCurrentPage() - 1;\n\t\t\t}\n\t\t},\n\t\tnextPage: function () {\n\t\t\tif (!this.hasNext()) {\n\t\t\t\t_currentPage = this.getCurrentPage() + 1;\n\t\t\t}\n\t\t},\n\t\thasPrevious: function () {\n\t\t\tif (paginationService.getPageStart() <= 1) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\thasNext: function () {\n\t\t\tif (paginationService.getPageEnd() === paginationService.getRecordsCount()) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn paginationService;\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"productBundleService\", [\"$log\", \"$slatwall\", \"utilityService\", function ($log, $slatwall, utilityService) {\n\tvar productBundleService = {\n\t\tdecorateProductBundleGroup: function (productBundleGroup) {\n\t\t\tproductBundleGroup.data.$$editing = true;\n\t\t\tvar prototype = {\n\t\t\t\t$$setMinimumQuantity: function (quantity) {\n\t\t\t\t\tif (quantity < 0 || quantity === null) {\n\t\t\t\t\t\tthis.minimumQuantity = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (quantity > this.maximumQuantity) {\n\t\t\t\t\t\tthis.maximumQuantity = quantity;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t$$setMaximumQuantity: function (quantity) {\n\t\t\t\t\tif (quantity < 1 || quantity === null) {\n\t\t\t\t\t\tthis.maximumQuantity = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.maximumQuantity < this.minimumQuantity) {\n\t\t\t\t\t\tthis.minimumQuantity = this.maximumQuantity;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t$$setActive: function (value) {\n\t\t\t\t\tthis.active = value;\n\t\t\t\t},\n\t\t\t\t$$toggleEdit: function () {\n\t\t\t\t\tif (angular.isUndefined(this.$$editing) || this.$$editing === false) {\n\t\t\t\t\t\tthis.$$editing = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.$$editing = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tangular.extend(productBundleGroup.data, prototype);\n\t\t},\n\t\tformatProductBundleGroupFilters: function (productBundelGroupFilters, filterTerm) {\n\t\t\t$log.debug(\"formatProductBundleGroupFilters\");\n\t\t\t$log.debug(filterTerm);\n\t\t\tif (filterTerm.value === \"sku\") {\n\t\t\t\tfor (var i in productBundelGroupFilters) {\n\t\t\t\t\tproductBundelGroupFilters[i].name = productBundelGroupFilters[i][filterTerm.value + \"Code\"];\n\t\t\t\t\tproductBundelGroupFilters[i].type = filterTerm.name;\n\t\t\t\t\tproductBundelGroupFilters[i].entityType = filterTerm.value;\n\t\t\t\t\tproductBundelGroupFilters[i].propertyIdentifier = \"_sku.skuID\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (var i in productBundelGroupFilters) {\n\t\t\t\t\tproductBundelGroupFilters[i].name = productBundelGroupFilters[i][filterTerm.value + \"Name\"];\n\t\t\t\t\tproductBundelGroupFilters[i].type = filterTerm.name;\n\t\t\t\t\tproductBundelGroupFilters[i].entityType = filterTerm.value;\n\t\t\t\t\tif (filterTerm.value === \"brand\" || filterTerm.value === \"productType\") {\n\t\t\t\t\t\tproductBundelGroupFilters[i].propertyIdentifier = \"_sku.product.\" + filterTerm.value + \".\" + filterTerm.value + \"ID\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproductBundelGroupFilters[i].propertyIdentifier = \"_sku.\" + filterTerm.value + \".\" + filterTerm.value + \"ID\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tproductBundelGroupFilters = utilityService.arraySorter(productBundelGroupFilters, \"name\");\n\n\t\t\t$log.debug(productBundelGroupFilters);\n\t\t\treturn productBundelGroupFilters;\n\t\t}\n\n\t};\n\n\treturn productBundleService;\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"slatwallInterceptor\", [\"$q\", \"$log\", \"alertService\", function ($q, $log, alertService) {\n\tvar interceptor = {\n\t\trequest: function (config) {\n\t\t\t$log.debug(\"request\");\n\t\t\tif (config.method == \"GET\" && config.url.indexOf(\".html\") == -1 && config.url.indexOf(\".json\") == -1) {\n\t\t\t\tconfig.method = \"POST\";\n\t\t\t\tconfig.data = {};\n\t\t\t\tvar data = {};\n\t\t\t\tif (angular.isDefined(config.params)) {\n\t\t\t\t\tdata = config.params;\n\t\t\t\t}\n\t\t\t\tvar params = {};\n\t\t\t\tparams.serializedJsonData = angular.toJson(data);\n\t\t\t\tparams.context = \"GET\";\n\t\t\t\tconfig.data = $.param(params);\n\t\t\t\tdelete config.params;\n\t\t\t\tconfig.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\t\t\t}\n\n\t\t\treturn config;\n\t\t},\n\t\tresponse: function (response) {\n\t\t\t$log.debug(\"response\");\n\t\t\tvar messages = response.data.messages;\n\t\t\tvar alerts = alertService.formatMessagesToAlerts(messages);\n\t\t\talertService.addAlerts(alerts);\n\t\t\treturn response;\n\t\t},\n\t\trequestError: function (rejection) {\n\t\t\t$log.debug(\"requestError\");\n\t\t\treturn $q.reject(rejection);\n\t\t},\n\t\tresponseError: function (rejection) {\n\t\t\t$log.debug(\"responseReject\");\n\t\t\tif (angular.isDefined(rejection.status) && rejection.status !== 404) {\n\t\t\t\tif (angular.isDefined(rejection.data) && angular.isDefined(rejection.data.messages)) {\n\t\t\t\t\tvar messages = rejection.data.messages;\n\t\t\t\t\tvar alerts = alertService.formatMessagesToAlerts(messages);\n\t\t\t\t\talertService.addAlerts(alerts);\n\t\t\t\t} else {\n\t\t\t\t\tvar message = {\n\t\t\t\t\t\tmsg: \"there was error retrieving data\",\n\t\t\t\t\t\ttype: \"error\"\n\t\t\t\t\t};\n\t\t\t\t\talertService.addAlert(message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $q.reject(rejection);\n\t\t}\n\t};\n\treturn interceptor;\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"alertController\", [\"$scope\", \"alertService\", function ($scope, alertService) {\n\t$scope.$id = \"alertController\";\n\t$scope.alerts = alertService.getAlerts();\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\")\n//using $location to get url params, this will probably change to using routes eventually\n.controller(\"collections\", [\"$scope\", \"$location\", \"$log\", \"$timeout\", \"$slatwall\", \"collectionService\", \"metadataService\", \"paginationService\", function ($scope, $location, $log, $timeout, $slatwall, collectionService, metadataService, paginationService) {\n\t//init values\n\t//$scope.collectionTabs =[{tabTitle:'PROPERTIES',isActive:true},{tabTitle:'FILTERS ('+filterCount+')',isActive:false},{tabTitle:'DISPLAY OPTIONS',isActive:false}];\n\t$scope.$id = \"collectionsController\";\n\n\t/*used til we convert to use route params*/\n\tvar QueryString = (function () {\n\t\t// This function is anonymous, is executed immediately and\n\t\t// the return value is assigned to QueryString!\n\t\tvar query_string = {};\n\t\tvar query = window.location.search.substring(1);\n\t\tvar vars = query.split(\"&\");\n\t\tfor (var i = 0; i < vars.length; i++) {\n\t\t\tvar pair = vars[i].split(\"=\");\n\t\t\t// If first entry with this name\n\t\t\tif (typeof query_string[pair[0]] === \"undefined\") {\n\t\t\t\tquery_string[pair[0]] = pair[1];\n\t\t\t\t// If second entry with this name\n\t\t\t} else if (typeof query_string[pair[0]] === \"string\") {\n\t\t\t\tvar arr = [query_string[pair[0]], pair[1]];\n\t\t\t\tquery_string[pair[0]] = arr;\n\t\t\t\t// If third or later entry with this name\n\t\t\t} else {\n\t\t\t\tquery_string[pair[0]].push(pair[1]);\n\t\t\t}\n\t\t}\n\t\treturn query_string;\n\t})();\n\t//get url param to retrieve collection listing\n\t$scope.collectionID = QueryString.collectionID;\n\n\t$scope.currentPage = paginationService.getCurrentPage();\n\t$scope.pageShow = paginationService.getPageShow();\n\t$scope.pageStart = paginationService.getPageStart;\n\t$scope.pageEnd = paginationService.getPageEnd;\n\t$scope.recordsCount = paginationService.getRecordsCount;\n\t$scope.autoScrollPage = 1;\n\t$scope.autoScrollDisabled = false;\n\n\n\t$scope.appendToCollection = function () {\n\t\tif ($scope.pageShow === \"Auto\") {\n\t\t\t$log.debug(\"AppendToCollection\");\n\t\t\tif ($scope.autoScrollPage < $scope.collection.totalPages) {\n\t\t\t\t$scope.autoScrollDisabled = true;\n\t\t\t\t$scope.autoScrollPage++;\n\n\t\t\t\tvar collectionListingPromise = $slatwall.getEntity(\"collection\", { id: $scope.collectionID, currentPage: $scope.autoScrollPage, pageShow: 50 });\n\t\t\t\tcollectionListingPromise.then(function (value) {\n\t\t\t\t\t$scope.collection.pageRecords = $scope.collection.pageRecords.concat(value.pageRecords);\n\t\t\t\t\t$scope.autoScrollDisabled = false;\n\t\t\t\t}, function (reason) {});\n\t\t\t}\n\t\t}\n\t};\n\n\t$scope.keywords = \"\";\n\t$scope.loadingCollection = false;\n\tvar searchPromise;\n\t$scope.searchCollection = function ($timout) {\n\t\tif (searchPromise) {\n\t\t\t$timeout.cancel(searchPromise);\n\t\t}\n\n\t\tsearchPromise = $timeout(function () {\n\t\t\t$log.debug(\"search with keywords\");\n\t\t\t$log.debug($scope.keywords);\n\t\t\t//Set current page here so that the pagination does not break when getting collection\n\t\t\tpaginationService.setCurrentPage(1);\n\t\t\t$scope.loadingCollection = true;\n\t\t\t$scope.getCollection();\n\t\t}, 500);\n\t};\n\n\n\n\t$scope.getCollection = function () {\n\t\tvar pageShow = 50;\n\t\tif ($scope.pageShow !== \"Auto\") {\n\t\t\tpageShow = $scope.pageShow;\n\t\t}\n\n\t\tvar collectionListingPromise = $slatwall.getEntity(\"collection\", { id: $scope.collectionID, currentPage: $scope.currentPage, pageShow: pageShow, keywords: $scope.keywords });\n\t\tcollectionListingPromise.then(function (value) {\n\t\t\t$scope.collection = value;\n\n\t\t\t$scope.collectionInitial = angular.copy($scope.collection);\n\t\t\tif (angular.isUndefined($scope.collectionConfig)) {\n\t\t\t\t$scope.collectionConfig = angular.fromJson($scope.collection.collectionConfig);\n\t\t\t}\n\n\t\t\t//check if we have any filter Groups\n\t\t\tif (angular.isUndefined($scope.collectionConfig.filterGroups)) {\n\t\t\t\t$scope.collectionConfig.filterGroups = [{\n\t\t\t\t\tfilterGroup: []\n\t\t\t\t}];\n\t\t\t}\n\t\t\tcollectionService.setFilterCount(filterItemCounter());\n\t\t\t$scope.loadingCollection = false;\n\t\t}, function (reason) {});\n\t};\n\n\t$scope.getCollection();\n\n\tvar unbindCollectionObserver = $scope.$watch(\"collection\", function (newValue, oldValue) {\n\t\tif (newValue !== oldValue) {\n\t\t\tif (angular.isUndefined($scope.filterPropertiesList)) {\n\t\t\t\t$scope.filterPropertiesList = {};\n\t\t\t\tvar filterPropertiesPromise = $slatwall.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);\n\t\t\t\tfilterPropertiesPromise.then(function (value) {\n\t\t\t\t\tmetadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);\n\t\t\t\t\t$scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);\n\t\t\t\t\tmetadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);\n\t\t\t\t});\n\t\t\t}\n\t\t\tunbindCollectionObserver();\n\t\t}\n\t});\n\n\t$scope.setCollectionForm = function (form) {\n\t\t$scope.collectionForm = form;\n\t};\n\n\n\t$scope.collectionDetails = {\n\t\tisOpen: false,\n\t\topenCollectionDetails: function () {\n\t\t\t$scope.collectionDetails.isOpen = true;\n\t\t}\n\t};\n\n\t$scope.errorMessage = {};\n\n\tvar filterItemCounter = function (filterGroupArray) {\n\t\tvar filterItemCount = 0;\n\n\t\tif (!angular.isDefined(filterGroupArray)) {\n\t\t\tfilterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;\n\t\t}\n\n\t\t//Start out loop\n\t\tfor (var index in filterGroupArray) {\n\t\t\t//If filter isn't new then increment the count\n\t\t\tif (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {\n\t\t\t\tfilterItemCount++;\n\t\t\t\t// If there are nested filter groups run introspectively\n\t\t\t} else if (angular.isDefined(filterGroupArray[index].filterGroup)) {\n\t\t\t\t//Call function recursively\n\t\t\t\tfilterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);\n\n\t\t\t\t//Otherwise make like the foo fighters and \"Break Out!\"\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn filterItemCount;\n\t};\n\n\n\t$scope.saveCollection = function () {\n\t\t$timeout(function () {\n\t\t\t$log.debug(\"saving Collection\");\n\t\t\tvar entityName = \"collection\";\n\t\t\tvar collection = $scope.collection;\n\t\t\t$log.debug($scope.collectionConfig);\n\n\t\t\tif (isFormValid($scope.collectionForm)) {\n\t\t\t\tvar collectionConfigString = collectionService.stringifyJSON($scope.collectionConfig);\n\t\t\t\t$log.debug(collectionConfigString);\n\t\t\t\tvar data = angular.copy(collection);\n\n\t\t\t\tdata.collectionConfig = collectionConfigString;\n\t\t\t\t//has to be removed in order to save transient correctly\n\t\t\t\tdelete data.pageRecords;\n\t\t\t\tvar saveCollectionPromise = $slatwall.saveEntity(entityName, collection.collectionID, data);\n\t\t\t\tsaveCollectionPromise.then(function (value) {\n\t\t\t\t\t$scope.errorMessage = {};\n\t\t\t\t\t//Set current page here so that the pagination does not break when getting collection\n\t\t\t\t\tpaginationService.setCurrentPage(1);\n\t\t\t\t\t$scope.getCollection();\n\t\t\t\t\t$scope.collectionDetails.isOpen = false;\n\t\t\t\t}, function (reason) {\n\t\t\t\t\t//revert to original\n\t\t\t\t\tangular.forEach(reason.errors, function (value, key) {\n\t\t\t\t\t\t$scope.collectionForm[key].$invalid = true;\n\t\t\t\t\t\t$scope.errorMessage[key] = value[0];\n\t\t\t\t\t});\n\t\t\t\t\t//$scope.collection = angular.copy($scope.collectionInitial);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcollectionService.setFilterCount(filterItemCounter());\n\t\t});\n\t};\n\n\tvar isFormValid = function (angularForm) {\n\t\t$log.debug(\"validateForm\");\n\t\tvar formValid = true;\n\t\tfor (var field in angularForm) {\n\t\t\t// look at each form input with a name attribute set\n\t\t\t// checking if it is pristine and not a '$' special field\n\t\t\tif (field[0] != \"$\") {\n\t\t\t\t// need to use formValid variable instead of formController.$valid because checkbox dropdown is not an input\n\t\t\t\t// and somehow formController didn't invalid if checkbox dropdown is invalid\n\t\t\t\tif (angularForm[field].$invalid) {\n\t\t\t\t\tformValid = false;\n\t\t\t\t\tfor (var error in angularForm[field].$error) {\n\t\t\t\t\t\tif (error == \"required\") {\n\t\t\t\t\t\t\t$scope.errorMessage[field] = \"This field is required\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (angularForm[field].$pristine) {\n\t\t\t\t\tif (angular.isUndefined(angularForm[field].$viewValue)) {\n\t\t\t\t\t\tangularForm[field].$setViewValue(\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangularForm[field].$setViewValue(angularForm[field].$viewValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn formValid;\n\t};\n\n\t$scope.copyExistingCollection = function () {\n\t\t$scope.collection.collectionConfig = $scope.selectedExistingCollection;\n\t};\n\n\t$scope.setSelectedExistingCollection = function (selectedExistingCollection) {\n\t\t$scope.selectedExistingCollection = selectedExistingCollection;\n\t};\n\n\t$scope.setSelectedFilterProperty = function (selectedFilterProperty) {\n\t\t$scope.selectedFilterProperty = selectedFilterProperty;\n\t};\n\n\t$scope.filterCount = collectionService.getFilterCount;\n}]);","\"use strict\";\n\nangular.module(\"slatwalladmin\")\n//using $location to get url params, this will probably change to using routes eventually\n.controller(\"collectionsTabController\", [\"$scope\", function ($scope) {}]);\n//$scope.tabSelected = function(tab,tabArray){\n\n//}","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"confirmationController\", [\"$scope\", \"$log\", \"$modalInstance\", function ($scope, $log, $modalInstance) {\n  $scope.deleteEntity = function (entity) {\n    $log.debug(\"Deleting an entity.\");\n    $log.debug($scope.entity);\n    this.close();\n  };\n  /**\n   * Closes the modal window\n   */\n  $scope.close = function () {\n    $modalInstance.close();\n  };\n  /**\n   * Cancels the modal window\n   */\n  $scope.cancel = function () {\n    $modalInstance.dismiss(\"cancel\");\n  };\n\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"create-bundle-controller\", [\"$scope\", \"$location\", \"$log\", \"$rootScope\", \"$window\", \"$slatwall\", \"dialogService\", \"alertService\", \"productBundleService\", \"formService\", \"partialsPath\", function ($scope, $location, $log, $rootScope, $window, $slatwall, dialogService, alertService, productBundleService, formService, partialsPath) {\n\t$scope.partialsPath = partialsPath;\n\n\tfunction getParameterByName(name) {\n\t\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\t\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\t    results = regex.exec(location.search);\n\t\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n\t}\n\n\t$scope.$id = \"create-bundle-controller\";\n\t//if this view is part of the dialog section, call the inherited function\n\tif (angular.isDefined($scope.scrollToTopOfDialog)) {\n\t\t$scope.scrollToTopOfDialog();\n\t}\n\n\tvar productID = getParameterByName(\"productID\");\n\n\tvar productBundleConstructor = function () {\n\t\t$scope.product = $slatwall.newProduct();\n\t\tvar brand = $slatwall.newBrand();\n\t\tvar productType = $slatwall.newProductType();\n\t\t$scope.product.$$setBrand(brand);\n\t\t$scope.product.$$setProductType(productType);\n\t\t$scope.product.$$addSku();\n\t\t$scope.product.data.skus[0].data.productBundleGroups = [];\n\t};\n\n\t$scope.productBundleGroup;\n\n\tif (angular.isDefined(productID) && productID !== \"\") {\n\t\tvar productPromise = $slatwall.getProduct({ id: productID });\n\n\t\tproductPromise.promise.then(function () {\n\t\t\t$log.debug(productPromise.value);\n\t\t\tproductPromise.value.$$getSkus().then(function () {\n\t\t\t\tproductPromise.value.data.skus[0].$$getProductBundleGroups().then(function () {\n\t\t\t\t\t$scope.product = productPromise.value;\n\t\t\t\t\tangular.forEach($scope.product.data.skus[0].data.productBundleGroups, function (productBundleGroup) {\n\t\t\t\t\t\tproductBundleGroup.$$getProductBundleGroupType();\n\t\t\t\t\t\tproductBundleService.decorateProductBundleGroup(productBundleGroup);\n\t\t\t\t\t\tproductBundleGroup.data.$$editing = false;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}, productBundleConstructor());\n\t} else {\n\t\tproductBundleConstructor();\n\t}\n\n\t$scope.saveProductBundle = function (closeDialogIndex) {\n\t\t$scope.newSaving = true;\n\t\t$log.debug($scope.newSaving);\n\t\t$scope.dIndex = closeDialogIndex;\n\t\t$scope.product.$$save().then(function () {\n\t\t\t$log.debug(\"Turn off the loader after saving.\");\n\t\t\t$scope.newSaving = false;\n\t\t\tif (angular.isDefined($scope.dIndex)) {\n\t\t\t\t$scope.closeSaving = true;\n\t\t\t\t$rootScope.closePageDialog($scope.dIndex);\n\t\t\t}\n\t\t});\n\n\n\n\t};\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"globalSearch\", [\"$scope\", \"$log\", \"$window\", \"$timeout\", \"$slatwall\", function ($scope, $log, $window, $timeout, $slatwall) {\n\t$scope.keywords = \"\";\n\t$scope.searchResultsOpen = false;\n\t$scope.sidebarClass = \"sidebar\";\n\t$scope.loading = false; //Set loading wheel to false\n\t$scope.resultsFound = true; // Set the results Found to true because no search has been done yet\n\n\t$scope.searchResults = {\n\t\tproduct: {\n\t\t\ttitle: \"Products\",\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.productName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.productID;\n\t\t\t}\n\t\t},\n\t\tbrand: {\n\t\t\ttitle: $slatwall.getRBKey(\"entity.Brands\"),\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.brandName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.brandID;\n\t\t\t}\n\t\t},\n\t\taccount: {\n\t\t\ttitle: \"Accounts\",\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.firstName + \" \" + data.lastName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.accountID;\n\t\t\t}\n\t\t},\n\t\tvendor: {\n\t\t\ttitle: \"Vendors\",\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.vendorName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.vendorID;\n\t\t\t}\n\t\t}\n\t};\n\n\n\tvar _timeoutPromise;\n\tvar _loadingCount = 0;\n\n\t$scope.updateSearchResults = function () {\n\t\t$scope.loading = true;\n\t\t$scope.showResults();\n\n\t\tif (_timeoutPromise) {\n\t\t\t$timeout.cancel(_timeoutPromise);\n\t\t}\n\n\t\t_timeoutPromise = $timeout(function () {\n\t\t\t// If no keywords, then set everything back to their defaults\n\t\t\tif ($scope.keywords === \"\") {\n\t\t\t\t$scope.hideResults();\n\n\t\t\t\t// Otherwise performe the search\n\t\t\t} else {\n\t\t\t\t$scope.showResults();\n\n\t\t\t\t// Set the loadingCount to the number of AJAX Calls we are about to do\n\t\t\t\t_loadingCount = Object.keys($scope.searchResults).length;\n\n\t\t\t\tfor (var entityName in $scope.searchResults) {\n\t\t\t\t\t(function (entityName) {\n\t\t\t\t\t\tvar searchPromise = $slatwall.getEntity(entityName, { keywords: $scope.keywords, pageShow: 4, deferkey: \"global-search-\" + entityName });\n\n\t\t\t\t\t\tsearchPromise.then(function (data) {\n\t\t\t\t\t\t\t// Clear out the old Results\n\t\t\t\t\t\t\t$scope.searchResults[entityName].results = [];\n\t\t\t\t\t\t\t$scope.searchResults[entityName].title = $slatwall.getRBKey(\"entity.\" + entityName.toLowerCase() + \"_plural\");\n\t\t\t\t\t\t\t// push in the new results\n\t\t\t\t\t\t\tfor (var i in data.pageRecords) {\n\t\t\t\t\t\t\t\t$scope.searchResults[entityName].results.push({\n\t\t\t\t\t\t\t\t\tname: $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),\n\t\t\t\t\t\t\t\t\tlink: \"?slatAction=entity.detail\" + entityName + \"&\" + entityName + \"ID=\" + $scope.searchResults[entityName].id(data.pageRecords[i]) });\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Increment Down The Loading Count\n\t\t\t\t\t\t\t_loadingCount--;\n\n\t\t\t\t\t\t\t// If the loadingCount drops to 0, then we can update scope\n\t\t\t\t\t\t\tif (_loadingCount == 0) {\n\t\t\t\t\t\t\t\t$scope.loading = false;\n\n\t\t\t\t\t\t\t\tvar _foundResults = false;\n\t\t\t\t\t\t\t\tfor (var _thisEntityName in $scope.searchResults) {\n\t\t\t\t\t\t\t\t\tif ($scope.searchResults[_thisEntityName].results.length) {\n\t\t\t\t\t\t\t\t\t\t_foundResults = true;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$scope.resultsFound = _foundResults;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(entityName);\n\t\t\t\t}\n\t\t\t}\n\t\t}, 500);\n\n\t};\n\n\n\t$scope.showResults = function () {\n\t\t$scope.searchResultsOpen = true;\n\t\t$scope.sidebarClass = \"sidebar s-search-width\";\n\t\t$window.onclick = function (event) {\n\t\t\tvar _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains(\"sidebar\");\n\t\t\tif (!_targetClassOfSearch) {\n\t\t\t\t$scope.hideResults();\n\t\t\t\t$scope.$apply();\n\t\t\t}\n\t\t};\n\t};\n\n\t$scope.hideResults = function () {\n\t\t$scope.searchResultsOpen = false;\n\t\t$scope.sidebarClass = \"sidebar\";\n\t\t$scope.search.$setPristine();\n\t\t$scope.keywords = \"\";\n\t\t$window.onclick = null;\n\t\t$scope.loading = false;\n\t\t$scope.resultsFound = true;\n\n\t\tfor (var entityName in $scope.searchResults) {\n\t\t\t$scope.searchResults[entityName].results = [];\n\t\t}\n\t};\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"pageDialog\", [\"$scope\", \"$location\", \"$log\", \"$anchorScroll\", \"$slatwall\", \"dialogService\", function ($scope, $location, $log, $anchorScroll, $slatwall, dialogService) {\n\t$scope.$id = \"pageDialogController\";\n\n\t//get url param to retrieve collection listing\n\t$scope.pageDialogs = dialogService.getPageDialogs();\n\t$scope.scrollToTopOfDialog = function () {\n\t\t$location.hash(\"/#topOfPageDialog\");\n\t\t$anchorScroll();\n\t};\n\t$scope.pageDialogStyle = { \"z-index\": 3000 };\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"preprocessaccount_addaccountpayment\", [\"$scope\", \"$compile\", function ($scope, $compile) {\n\t//Define the different payment types used here\n\tvar paymentType = { aptCharge: \"444df32dd2b0583d59a19f1b77869025\", aptCredit: \"444df32e9b448ea196c18c66e1454c46\", aptAdjustment: \"68e3fb57d8102b47acc0003906d16ddd\" };\n\n\t$scope.totalAmountToApply = 0; //Default value to show on new form\n\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.charge\"); //Default payment type\n\t$scope.paymentTypeLock = true; //Used to lock down the order payment type dropdowns\n\t$scope.amount = 0;\n\n\t$scope.updatePaymentType = function () {\n\t\t//Change all order payment types here\n\t\tangular.forEach($scope.appliedOrderPayment, function (obj, key) {\n\t\t\t//Only change the payment type if the type isn't adjustment'\n\t\t\tif ($scope.paymentType != paymentType.aptAdjustment) obj.paymentType = $scope.paymentType;\n\t\t});\n\n\t\tif ($scope.paymentType == paymentType.aptCharge) {\n\t\t\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.charge\");\n\t\t\t$scope.paymentTypeLock = true;\n\t\t} else if ($scope.paymentType == paymentType.aptCredit) {\n\t\t\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.credit\");\n\t\t\t$scope.paymentTypeLock = true;\n\t\t} else if ($scope.paymentType == paymentType.aptAdjustment) {\n\t\t\t$scope.paymentTypeLock = false;\n\t\t\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.adjustment\");\n\t\t\t$scope.amount = 0;\n\t\t}\n\n\t\t//Update the subtotal now that we changed the payment type\n\t\t$scope.updateSubTotal();\n\t};\n\n\t$scope.updateSubTotal = function () {\n\t\t$scope.totalAmountToApply = 0; //Reset the subtotal before we loop\n\n\t\t//Loop through all the amount fields and create a running subtotal\n\t\tangular.forEach($scope.appliedOrderPayment, function (obj, key) {\n\t\t\t//Don't count the field if its undefied or not a number\n\t\t\tif (obj.amount != undefined && !isNaN(obj.amount)) {\n\t\t\t\t//Charge / adjustment condition for subtotal\n\t\t\t\tif ($scope.paymentType == paymentType.aptCharge || $scope.paymentType == paymentType.aptAdjustment) {\n\t\t\t\t\tif (obj.paymentType == paymentType.aptCharge) $scope.totalAmountToApply += parseFloat(obj.amount);else if (obj.paymentType == paymentType.aptCredit) $scope.totalAmountToApply -= parseFloat(obj.amount);\n\n\t\t\t\t\t//Credit condition for subtotal\n\t\t\t\t} else if ($scope.paymentType == paymentType.aptCredit) {\n\t\t\t\t\tif (obj.paymentType == paymentType.aptCharge) $scope.totalAmountToApply -= parseFloat(obj.amount);else if (obj.paymentType == paymentType.aptCredit) $scope.totalAmountToApply += parseFloat(obj.amount);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t//The amount not applied to an order\n\t\t$scope.amountUnapplied = Math.round(($scope.amount - $scope.totalAmountToApply) * 100) / 100;\n\t\t$scope.accountBalanceChange = parseFloat($scope.amount);\n\n\t\t//Switch the account balance display amount to a negative if you are doing a charge\n\t\tif ($scope.paymentType == paymentType.aptCharge) $scope.accountBalanceChange = parseFloat($scope.accountBalanceChange * -1); //If charge, change to neg since we are lowering account balance\n\t\telse if ($scope.paymentType == paymentType.aptAdjustment) $scope.accountBalanceChange += parseFloat($scope.amountUnapplied); //If adjustment, use the amount unapplied to determine the balance change\n\t};\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"routerController\", [\"$scope\", \"$routeParams\", \"$location\", \"$log\", \"partialsPath\", \"baseURL\", function ($scope, $routeParams, $location, $log, partialsPath, baseURL) {\n\t$scope.$id = \"routerController\";\n\t$scope.partialRoute = \"\";\n\n\t$log.debug($routeParams);\n\t$log.debug($location);\n\tvar path = $location.path();\n\t$scope.controllerType = path.split(\"/\")[1];\n\tvar type;\n\n\tif ($scope.controllerType === \"entity\") {\n\t\t$scope.entityName = $routeParams.entityName;\n\t\tif (angular.isDefined($routeParams.entityID)) {\n\t\t\t$scope.entityID = $routeParams.entityID || \"\";\n\t\t}\n\t}\n}]);"],"sourceRoot":"/source/"}