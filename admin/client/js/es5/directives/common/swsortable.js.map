{"version":3,"sources":["directives/common/swsortable.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC;KAC9B,SAAS,CAAC,aAAa,EAAE,CAAC,YAAY,EAAC,iBAAiB,EAAC,UAAS,UAAU,EAAE,eAAe;QAC1F,AACA,sEADsE;QACtE,eAAe,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAC,YAAY,CAAC,CAAC;QAElE,MAAM,CAAC,UAAS,WAAW;YACvB,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,WAAW,CAAC,QAAQ,CAAC;gBACjB,WAAW,EAAE,aAAa;gBAC1B,OAAO,EAAE,GAAG;gBACZ,IAAI,EAAE,GAAG;gBACT,MAAM,EAAE,UAAS,KAAK,EAAE,EAAE;oBACtB,AACA,YADY;wBACR,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACrC,AACA,sBADsB;wBAClB,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;oBAC/B,AACA,oBADoB;wBAChB,KAAK,GAAG,EAAE,CAAC;oBAEf,AACA,kCADkC;oBAClC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAS,KAAK;wBACtC,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBAEnB,AACA,qBADqB;4BACjB,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,CAAC,CAAC;wBAE5D,AACA,+BAD+B;wBAC/B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAE5B,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BAChC,AACA,yCADyC;4BACzC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;4BACvB,AACA,2BAD2B;4BAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;wBAClB,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;oBAE7B,AACA,+DAD+D;oBAC/D,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAC,KAAK,CAAC,CAAC;oBAE5C,AACA,+BAD+B;oBAC/B,KAAK,CAAC,OAAO,EAAE,CAAC;gBACpB,CAAC;aACJ,CAAC,CAAC;QACP,CAAC,CAAC;IAGN,CAAC,CAAC,CAAC,CAAC","file":"directives/common/swsortable.js","sourcesContent":["'use strict';\nangular.module('slatwalladmin')\n.directive(\"sw:sortable\", ['expression','compiledElement',function(expression, compiledElement){\n    // add my:sortable-index to children so we know the index in the model\n    compiledElement.children().attr(\"sw:sortable-index\",\"{{$index}}\");\n    \n    return function(linkElement){\n        var scope = this;             \n        \n        linkElement.sortable({\n            placeholder: \"placeholder\",\n            opacity: 0.8,\n            axis: \"y\",\n            update: function(event, ui) {\n                // get model\n                var model = scope.$apply(expression);\n                // remember its length\n                var modelLength = model.length;\n                // rember html nodes\n                var items = [];\n\n                // loop through items in new order\n                linkElement.children().each(function(index) {\n                    var item = $(this);\n                    \n                    // get old item index\n                    var oldIndex = parseInt(item.attr(\"sw:sortable-index\"), 10);\n                    \n                    // add item to the end of model\n                    model.push(model[oldIndex]);\n\n                    if(item.attr(\"sw:sortable-index\")) {\n                        // items in original order to restore dom\n                        items[oldIndex] = item;\n                        // and remove item from dom\n                        item.detach();\n                    }\n                });\n                \n                model.splice(0, modelLength);\n\n                // restore original dom order, so angular does not get confused\n                linkElement.append.apply(linkElement,items);\n\n                // notify angular of the change\n                scope.$digest();\n            }\n        });\n    };\n\n\t\t\n}]);\n\t\n"],"sourceRoot":"/source/"}