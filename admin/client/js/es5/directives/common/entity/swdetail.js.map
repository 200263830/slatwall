{"version":3,"sources":["directives/common/entity/swdetail.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAC1B,SAAS,CAAC,UAAU,EAAE,CACvB,WAAW,EACX,MAAM,EACN,WAAW,EACX,cAAc,EACd,UAAU,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE;AAChD,WAAO;AACH,gBAAQ,EAAE,GAAG;AACb,mBAAW,EAAE,YAAY,GAAG,oBAAoB;AAChD,YAAI,EAAE,UAAU,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;AAClC,iBAAK,CAAC,GAAG,GAAG,0BAA0B,CAAC;AACvC,gBAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;;AAEvC,iBAAK,CAAC,QAAQ,GAAG,UAAU,MAAM,EAAE;AAC/B,uBAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE;AAC1C,wBAAI,CAAC,aAAa,EAAE,CAAC;iBACxB,CAAC,CAAC;aACN,CAAC;AACF,gBAAI,aAAa,GAAG,YAAY;AAC5B,qBAAK,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AACrD,qBAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,EAAE;AAC1D,yBAAK,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;AAC9B,wBAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;AACzB,wBAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;iBAChC,CAAC,CAAC;aACN,CAAC;AACF,gBAAI,uBAAuB,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnG,iBAAK,CAAC,cAAc,GAAG,YAAY,GAAG,SAAS,CAAC;AAChD,iBAAK,CAAC,SAAS,GAAG,YAAY;AAC1B,oBAAI,KAAK,CAAC,QAAQ,KAAK,MAAM,EAAE;AAC3B,yBAAK,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,GAAG,uBAAuB,CAAC,EAAE,CAAC;AAC5D,iCAAa,EAAE,CAAC;iBACnB,MACI;AACD,wBAAI,aAAa,GAAG,SAAS,CAAC,KAAK,GAAG,uBAAuB,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;AACvF,iCAAa,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY;AACnC,6BAAK,CAAC,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC;AACnC,qCAAa,EAAE,CAAC;qBACnB,CAAC,CAAC;iBACN;aACJ,CAAC;AACF,iBAAK,CAAC,SAAS,EAAE,CAAC;AAClB,iBAAK,CAAC,YAAY,GAAG,YAAY;AAC7B,oBAAI,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC5C,6BAAa,CAAC,IAAI,CAAC,YAAY;AAC3B,6BAAS,CAAC,IAAI,CAAC,UAAU,GAAG,uBAAuB,GAAG,GAAG,CAAC,CAAC;iBAC9D,CAAC,CAAC;aACN,CAAC;AACF,iBAAK,CAAC,WAAW,GAAG,KAAK,CAAC;SAC7B;KACJ,CAAC;CACL,CACJ,CAAC,CAAC","file":"directives/common/entity/swdetail.js","sourcesContent":["'use strict';\n//Thanks to AdamMettro\nangular.module('slatwalladmin')\n    .directive('swDetail', [\n    '$location',\n    '$log',\n    '$slatwall',\n    'partialsPath',\n    function ($location, $log, $slatwall, partialsPath) {\n        return {\n            restrict: 'E',\n            templateUrl: partialsPath + 'entity/detail.html',\n            link: function (scope, element, attr) {\n                scope.$id = \"slatwallDetailController\";\n                $log.debug('slatwallDetailController');\n                /*Sets the view dirty on save*/\n                scope.setDirty = function (entity) {\n                    angular.forEach(entity.forms, function (form) {\n                        form.$setSubmitted();\n                    });\n                };\n                var setupMetaData = function () {\n                    scope[scope.entityName.toLowerCase()] = scope.entity;\n                    scope.entity.metaData.$$getDetailTabs().then(function (value) {\n                        scope.detailTabs = value.data;\n                        $log.debug('detailtabs');\n                        $log.debug(scope.detailTabs);\n                    });\n                };\n                var propertyCasedEntityName = scope.entityName.charAt(0).toUpperCase() + scope.entityName.slice(1);\n                scope.tabPartialPath = partialsPath + 'entity/';\n                scope.getEntity = function () {\n                    if (scope.entityID === 'null') {\n                        scope.entity = $slatwall['new' + propertyCasedEntityName]();\n                        setupMetaData();\n                    }\n                    else {\n                        var entityPromise = $slatwall['get' + propertyCasedEntityName]({ id: scope.entityID });\n                        entityPromise.promise.then(function () {\n                            scope.entity = entityPromise.value;\n                            setupMetaData();\n                        });\n                    }\n                };\n                scope.getEntity();\n                scope.deleteEntity = function () {\n                    var deletePromise = scope.entity.$$delete();\n                    deletePromise.then(function () {\n                        $location.path('/entity/' + propertyCasedEntityName + '/');\n                    });\n                };\n                scope.allTabsOpen = false;\n            }\n        };\n    }\n]);\n\n//# sourceMappingURL=../../../directives/common/entity/swdetail.js.map"],"sourceRoot":"/source/"}