{"version":3,"names":[],"mappings":"","sources":["modules/ngslatwall.js"],"sourcesContent":["angular.module('ngSlatwall', [])\n    .provider('$slatwall', [\n    function () {\n        var _deferred = {};\n        var _config = {\n            dateFormat: 'MM/DD/YYYY',\n            timeFormat: 'HH:MM',\n            rbLocale: '',\n            baseURL: '/',\n            applicationKey: 'Slatwall',\n            debugFlag: true,\n            instantiationKey: '84552B2D-A049-4460-55F23F30FE7B26AD'\n        };\n        if (slatwallAngular.slatwallConfig) {\n            angular.extend(_config, slatwallAngular.slatwallConfig);\n        }\n        return {\n            $get: ['$q',\n                '$http',\n                '$timeout',\n                '$log',\n                '$rootScope',\n                '$location',\n                '$anchorScroll',\n                'utilityService',\n                'formService',\n                function ($q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, utilityService, formService) {\n                    var slatwallService = {\n                        setJsEntities: function (jsEntities) {\n                            _jsEntities = jsEntities;\n                        },\n                        getJsEntities: function () {\n                            return _jsEntities;\n                        },\n                        populateCollection: function (collectionData, collectionConfig) {\n                            var entities = [];\n                            angular.forEach(collectionData, function (collectionItemData, key) {\n                                //create base Entity\n                                var entity = slatwallService['new' + collectionConfig.baseEntityName.replace('Slatwall', '')]();\n                                angular.forEach(collectionConfig.columns, function (column, key) {\n                                    var propertyIdentifier = column.propertyIdentifier.replace(collectionConfig.baseEntityAlias.toLowerCase() + '.', '');\n                                    var propertyIdentifierArray = propertyIdentifier.split('.');\n                                    var propertyIdentifierKey = propertyIdentifier.replace(/\\./g, '_');\n                                    var currentEntity = entity;\n                                    angular.forEach(propertyIdentifierArray, function (property, key) {\n                                        if (key === propertyIdentifierArray.length - 1) {\n                                            if (angular.isObject(collectionItemData[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype === 'many-to-one') {\n                                                var relatedEntity = slatwallService['new' + currentEntity.metaData[property].cfc]();\n                                                relatedEntity.$$init(collectionItemData[propertyIdentifierKey][0]);\n                                                currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);\n                                            }\n                                            else if (angular.isArray(collectionItemData[propertyIdentifierKey]) && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {\n                                                angular.forEach(collectionItemData[propertyIdentifierKey], function (arrayItem, key) {\n                                                    var relatedEntity = slatwallService['new' + currentEntity.metaData[property].cfc]();\n                                                    relatedEntity.$$init(arrayItem);\n                                                    currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);\n                                                });\n                                            }\n                                            else {\n                                                currentEntity.data[property] = collectionItemData[propertyIdentifierKey];\n                                            }\n                                        }\n                                        else {\n                                            var propertyMetaData = currentEntity.metaData[property];\n                                            if (angular.isUndefined(currentEntity.data[property])) {\n                                                if (propertyMetaData.fieldtype === 'one-to-many') {\n                                                    relatedEntity = [];\n                                                }\n                                                else {\n                                                    relatedEntity = slatwallService['new' + propertyMetaData.cfc]();\n                                                }\n                                            }\n                                            else {\n                                                relatedEntity = currentEntity.data[property];\n                                            }\n                                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);\n                                            currentEntity = relatedEntity;\n                                        }\n                                    });\n                                });\n                                entities.push(entity);\n                            });\n                            return entities;\n                        },\n                        getDefer: function (deferKey) {\n                            return _deferred[deferKey];\n                        },\n                        cancelPromise: function (deferKey) {\n                            var deferred = this.getDefer(deferKey);\n                            if (angular.isDefined(deferred)) {\n                                deferred.resolve({ messages: [{ messageType: 'error', message: 'User Cancelled' }] });\n                            }\n                        },\n                        newEntity: function (entityName) {\n                            return new _jsEntities[entityName];\n                        },\n                        getEntity: function (entityName, options) {\n                            if (angular.isDefined(options.deferKey)) {\n                                this.cancelPromise(options.deferKey);\n                            }\n                            var params = {};\n                            if (typeof options === 'String') {\n                                var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.get&entityName=' + entityName + '&entityID=' + options.id;\n                            }\n                            else {\n                                params['P:Current'] = options.currentPage || 1;\n                                params['P:Show'] = options.pageShow || 10;\n                                params.keywords = options.keywords || '';\n                                params.columnsConfig = options.columnsConfig || '';\n                                params.filterGroupsConfig = options.filterGroupsConfig || '';\n                                params.joinsConfig = options.joinsConfig || '';\n                                params.orderByConfig = options.orderByConfig || '';\n                                params.isDistinct = options.isDistinct || false;\n                                params.propertyIdentifiersList = options.propertyIdentifiersList || '';\n                                params.allRecords = options.allRecords || '';\n                                params.defaultColumns = options.defaultColumns || true;\n                                params.processContext = options.processContext || '';\n                                var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.get&entityName=' + entityName;\n                            }\n                            var deferred = $q.defer();\n                            if (angular.isDefined(options.id)) {\n                                urlString += '&entityId=' + options.id;\n                            }\n                            var transformResponse = function (data) {\n                                var data = JSON.parse(data);\n                                return data;\n                            };\n                            if (angular.isDefined(options.transformResponse)) {\n                                transformResponse = function (data) {\n                                    var data = JSON.parse(data);\n                                    if (angular.isDefined(data.records)) {\n                                        data = options.transformResponse(data.records);\n                                    }\n                                    return data;\n                                };\n                            }\n                            $http.get(urlString, {\n                                params: params,\n                                timeout: deferred.promise,\n                                transformResponse: transformResponse\n                            })\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                            if (options.deferKey) {\n                                _deferred[options.deferKey] = deferred;\n                            }\n                            return deferred.promise;\n                        },\n                        getResizedImageByProfileName: function (profileName, skuIDs) {\n                            var deferred = $q.defer();\n                            return $http.get(_config.baseURL + '/index.cfm/?slatAction=api:main.getResizedImageByProfileName&profileName=' + profileName + '&skuIDs=' + skuIDs)\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                        },\n                        getEventOptions: function (entityName) {\n                            var deferred = $q.defer();\n                            var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.getEventOptionsByEntityName&entityName=' + entityName;\n                            $http.get(urlString)\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                            return deferred.promise;\n                        },\n                        checkUniqueOrNullValue: function (object, property, value) {\n                            return $http.get(_config.baseURL + '/index.cfm/?slatAction=api:main.getValidationPropertyStatus&object=' + object + '&propertyidentifier=' + property + '&value=' + escape(value)).then(function (results) {\n                                return results.data.uniqueStatus;\n                            });\n                        },\n                        checkUniqueValue: function (object, property, value) {\n                            return $http.get(_config.baseURL + '/index.cfm/?slatAction=api:main.getValidationPropertyStatus&object=' + object + '&propertyidentifier=' + property + '&value=' + escape(value)).then(function (results) {\n                                return results.data.uniqueStatus;\n                            });\n                        },\n                        getPropertyDisplayData: function (entityName, options) {\n                            var deferred = $q.defer();\n                            var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.getPropertyDisplayData&entityName=' + entityName;\n                            var params = {};\n                            params.propertyIdentifiersList = options.propertyIdentifiersList || '';\n                            $http.get(urlString, { params: params })\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                            return deferred.promise;\n                        },\n                        getPropertyDisplayOptions: function (entityName, options) {\n                            var deferred = $q.defer();\n                            var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.getPropertyDisplayOptions&entityName=' + entityName;\n                            var params = {};\n                            params.property = options.property || '';\n                            if (angular.isDefined(options.argument1)) {\n                                params.argument1 = options.argument1;\n                            }\n                            $http.get(urlString, { params: params })\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                            return deferred.promise;\n                        },\n                        saveEntity: function (entityName, id, params, context) {\n                            var deferred = $q.defer();\n                            var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.post';\n                            if (angular.isDefined(entityName)) {\n                                params.entityName = entityName;\n                            }\n                            if (angular.isDefined(id)) {\n                                params.entityID = id;\n                            }\n                            if (angular.isDefined(context)) {\n                                params.context = context;\n                            }\n                            $http({\n                                url: urlString,\n                                method: 'POST',\n                                data: $.param(params),\n                                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                            })\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                            return deferred.promise;\n                        },\n                        getExistingCollectionsByBaseEntity: function (entityName) {\n                            var deferred = $q.defer();\n                            var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.getExistingCollectionsByBaseEntity&entityName=' + entityName;\n                            $http.get(urlString)\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                            return deferred.promise;\n                        },\n                        getFilterPropertiesByBaseEntityName: function (entityName) {\n                            var deferred = $q.defer();\n                            var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.getFilterPropertiesByBaseEntityName&EntityName=' + entityName;\n                            $http.get(urlString)\n                                .success(function (data) {\n                                deferred.resolve(data);\n                            }).error(function (reason) {\n                                deferred.reject(reason);\n                            });\n                            return deferred.promise;\n                        },\n                        getRBLoaded: function () {\n                            return _loadedResourceBundle;\n                        },\n                        hasResourceBundle: function () {\n                            if (!_loadingResourceBundle && !_loadedResourceBundle) {\n                                _loadingResourceBundle = true;\n                                var localeListArray = slatwallService.getConfigValue('rbLocale').split('_');\n                                var rbPromise;\n                                var rbPromises = [];\n                                rbPromise = slatwallService.getResourceBundle(slatwallService.getConfigValue('rbLocale'));\n                                rbPromises.push(rbPromise);\n                                if (localeListArray.length === 2) {\n                                    rbPromise = slatwallService.getResourceBundle(localeListArray[0]);\n                                    rbPromises.push(rbPromise);\n                                }\n                                if (localeListArray[0] !== 'en') {\n                                    slatwallService.getResourceBundle('en_us');\n                                    slatwallService.getResourceBundle('en');\n                                }\n                                $q.all(rbPromises).then(function (data) {\n                                    $rootScope.loadedResourceBundle = true;\n                                    _loadingResourceBundle = false;\n                                    _loadedResourceBundle = true;\n                                }, function (error) {\n                                    $rootScope.loadedResourceBundle = true;\n                                    _loadingResourceBundle = false;\n                                    _loadedResourceBundle = true;\n                                });\n                            }\n                            return _loadedResourceBundle;\n                        },\n                        getResourceBundle: function (locale) {\n                            var deferred = $q.defer();\n                            var locale = locale || _config.rbLocale;\n                            if (_resourceBundle[locale]) {\n                                return _resourceBundle[locale];\n                            }\n                            var urlString = _config.baseURL + '/index.cfm/?slatAction=api:main.getResourceBundle&instantiationKey=' + _config.instantiationKey;\n                            var params = {\n                                locale: locale\n                            };\n                            return $http.get(urlString, { params: params }).success(function (response) {\n                                _resourceBundle[locale] = response.data;\n                            }).error(function (response) {\n                                _resourceBundle[locale] = {};\n                            });\n                        },\n                        rbKey: function (key, replaceStringData) {\n                            var keyValue = this.getRBKey(key, _config.rbLocale);\n                            return keyValue;\n                        },\n                        getRBKey: function (key, locale, checkedKeys, originalKey) {\n                            if (!_loadingResourceBundle && _loadedResourceBundle) {\n                                key = key.toLowerCase();\n                                checkedKeys = checkedKeys || \"\";\n                                locale = locale || 'en_us';\n                                var keyListArray = key.split(',');\n                                if (keyListArray.length > 1) {\n                                    var keyValue = \"\";\n                                    for (var i = 0; i < keyListArray.length; i++) {\n                                        keyValue = this.getRBKey(keyListArray[i], locale, keyValue);\n                                        if (keyValue.slice(-8) != \"_missing\") {\n                                            break;\n                                        }\n                                    }\n                                    return keyValue;\n                                }\n                                var bundle = slatwallService.getResourceBundle(locale);\n                                if (!angular.isFunction(bundle.then)) {\n                                    if (angular.isDefined(bundle[key])) {\n                                        return bundle[key];\n                                    }\n                                    var checkedKeysListArray = checkedKeys.split(',');\n                                    checkedKeysListArray.push(key + '_' + locale + '_missing');\n                                    checkedKeys = checkedKeysListArray.join(\",\");\n                                    if (angular.isUndefined(originalKey)) {\n                                        originalKey = key;\n                                    }\n                                    var localeListArray = locale.split('_');\n                                    if (localeListArray.length === 2) {\n                                        bundle = slatwallService.getResourceBundle(localeListArray[0]);\n                                        if (angular.isDefined(bundle[key])) {\n                                            return bundle[key];\n                                        }\n                                        checkedKeysListArray.push(key + '_' + localeListArray[0] + '_missing');\n                                        checkedKeys = checkedKeysListArray.join(\",\");\n                                    }\n                                    var keyDotListArray = key.split('.');\n                                    if (keyDotListArray.length >= 3\n                                        && keyDotListArray[keyDotListArray.length - 2] === 'define') {\n                                        var newKey = key.replace(keyDotListArray[keyDotListArray.length - 3] + '.define', 'define');\n                                        return this.getRBKey(newKey, locale, checkedKeys, originalKey);\n                                    }\n                                    else if (keyDotListArray.length >= 2 && keyDotListArray[keyDotListArray.length - 2] !== 'define') {\n                                        var newKey = key.replace(keyDotListArray[keyDotListArray.length - 2] + '.', 'define.');\n                                        return this.getRBKey(newKey, locale, checkedKeys, originalKey);\n                                    }\n                                    if (localeListArray[0] !== \"en\") {\n                                        return this.getRBKey(originalKey, 'en', checkedKeys);\n                                    }\n                                    return checkedKeys;\n                                }\n                            }\n                            return '';\n                        },\n                        getConfig: function () {\n                            return _config;\n                        },\n                        getConfigValue: function (key) {\n                            return _config[key];\n                        },\n                        setConfigValue: function (key, value) {\n                            _config[key] = value;\n                        },\n                        setConfig: function (config) {\n                            _config = config;\n                        }\n                    };\n                    var _resourceBundle = {};\n                    var _loadingResourceBundle = false;\n                    var _loadedResourceBundle = false;\n                    var _jsEntities = {};\n                    return slatwallService;\n                }],\n            getConfig: function () {\n                return _config;\n            },\n            getConfigValue: function (key) {\n                return _config[key];\n            },\n            setConfigValue: function (key, value) {\n                _config[key] = value;\n            },\n            setConfig: function (config) {\n                _config = config;\n            }\n        };\n    }]);\n\n//# sourceMappingURL=../modules/ngslatwall.js.map"],"file":"modules/ngslatwall.js","sourceRoot":"/source/"}