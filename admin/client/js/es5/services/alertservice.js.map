{"version":3,"names":[],"mappings":"","sources":["services/alertservice.js"],"sourcesContent":["/// <reference path='../../../../client/typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../../client/typings/tsd.d.ts' />\n/*services return promises which can be handled uniquely based on success or failure by the controller*/\nvar slatwalladmin;\n(function (slatwalladmin) {\n    class AlertService {\n        constructor($timeout, alerts) {\n            this.$timeout = $timeout;\n            this.alerts = alerts;\n            this.get = () => {\n                return this.alerts || [];\n            };\n            this.addAlert = (alert) => {\n                this.alerts.push(alert);\n                this.$timeout((alert) => {\n                    this.removeAlert(alert);\n                }, 3500);\n            };\n            this.addAlerts = (alerts) => {\n                alerts.forEach(alert => {\n                    this.addAlert(alert);\n                });\n            };\n            this.removeAlert = (alert) => {\n                var index = this.alerts.indexOf(alert, 0);\n                if (index != undefined) {\n                    this.alerts.splice(index, 1);\n                }\n            };\n            this.getAlerts = () => {\n                return this.alerts;\n            };\n            this.formatMessagesToAlerts = (messages) => {\n                var alerts = [];\n                for (var message in messages) {\n                    var alert = new slatwalladmin.Alert();\n                    alert.msg = messages[message].message;\n                    alert.type = messages[message].messageType;\n                    alerts.push(alert);\n                    if (alert.type === 'success' || alert.type === 'error') {\n                        $timeout(function () {\n                            alert.fade = true;\n                        }, 3500);\n                        alert.dismissable = false;\n                    }\n                    else {\n                        alert.fade = false;\n                        alert.dismissable = true;\n                    }\n                }\n                return alerts;\n            };\n            this.removeOldestAlert = () => {\n                this.alerts.splice(0, 1);\n            };\n            this.alerts = [];\n        }\n    }\n    AlertService.$inject = [\n        '$timeout'\n    ];\n    slatwalladmin.AlertService = AlertService;\n})(slatwalladmin || (slatwalladmin = {}));\nvar slatwalladmin;\n(function (slatwalladmin) {\n    angular.module('slatwalladmin')\n        .service('alertService', slatwalladmin.AlertService);\n})(slatwalladmin || (slatwalladmin = {}));\n\n//# sourceMappingURL=../services/alertservice.js.map"],"file":"services/alertservice.js","sourceRoot":"/source/"}